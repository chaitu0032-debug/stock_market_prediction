{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.5.2"
    },
    "colab": {
      "name": "Stock-Predictor-using-LSTM.ipynb",
      "provenance": [],
      "collapsed_sections": []
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "resources": {
            "http://localhost:8080/nbextensions/google.colab/files.js": {
              "data": "Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7CgpmdW5jdGlvbiBfdXBsb2FkRmlsZXMoaW5wdXRJZCwgb3V0cHV0SWQpIHsKICBjb25zdCBzdGVwcyA9IHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCk7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICAvLyBDYWNoZSBzdGVwcyBvbiB0aGUgb3V0cHV0RWxlbWVudCB0byBtYWtlIGl0IGF2YWlsYWJsZSBmb3IgdGhlIG5leHQgY2FsbAogIC8vIHRvIHVwbG9hZEZpbGVzQ29udGludWUgZnJvbSBQeXRob24uCiAgb3V0cHV0RWxlbWVudC5zdGVwcyA9IHN0ZXBzOwoKICByZXR1cm4gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpOwp9CgovLyBUaGlzIGlzIHJvdWdobHkgYW4gYXN5bmMgZ2VuZXJhdG9yIChub3Qgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyIHlldCksCi8vIHdoZXJlIHRoZXJlIGFyZSBtdWx0aXBsZSBhc3luY2hyb25vdXMgc3RlcHMgYW5kIHRoZSBQeXRob24gc2lkZSBpcyBnb2luZwovLyB0byBwb2xsIGZvciBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcC4KLy8gVGhpcyB1c2VzIGEgUHJvbWlzZSB0byBibG9jayB0aGUgcHl0aG9uIHNpZGUgb24gY29tcGxldGlvbiBvZiBlYWNoIHN0ZXAsCi8vIHRoZW4gcGFzc2VzIHRoZSByZXN1bHQgb2YgdGhlIHByZXZpb3VzIHN0ZXAgYXMgdGhlIGlucHV0IHRvIHRoZSBuZXh0IHN0ZXAuCmZ1bmN0aW9uIF91cGxvYWRGaWxlc0NvbnRpbnVlKG91dHB1dElkKSB7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICBjb25zdCBzdGVwcyA9IG91dHB1dEVsZW1lbnQuc3RlcHM7CgogIGNvbnN0IG5leHQgPSBzdGVwcy5uZXh0KG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSk7CiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXh0LnZhbHVlLnByb21pc2UpLnRoZW4oKHZhbHVlKSA9PiB7CiAgICAvLyBDYWNoZSB0aGUgbGFzdCBwcm9taXNlIHZhbHVlIHRvIG1ha2UgaXQgYXZhaWxhYmxlIHRvIHRoZSBuZXh0CiAgICAvLyBzdGVwIG9mIHRoZSBnZW5lcmF0b3IuCiAgICBvdXRwdXRFbGVtZW50Lmxhc3RQcm9taXNlVmFsdWUgPSB2YWx1ZTsKICAgIHJldHVybiBuZXh0LnZhbHVlLnJlc3BvbnNlOwogIH0pOwp9CgovKioKICogR2VuZXJhdG9yIGZ1bmN0aW9uIHdoaWNoIGlzIGNhbGxlZCBiZXR3ZWVuIGVhY2ggYXN5bmMgc3RlcCBvZiB0aGUgdXBsb2FkCiAqIHByb2Nlc3MuCiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIGlucHV0IGZpbGUgcGlja2VyIGVsZW1lbnQuCiAqIEBwYXJhbSB7c3RyaW5nfSBvdXRwdXRJZCBFbGVtZW50IElEIG9mIHRoZSBvdXRwdXQgZGlzcGxheS4KICogQHJldHVybiB7IUl0ZXJhYmxlPCFPYmplY3Q+fSBJdGVyYWJsZSBvZiBuZXh0IHN0ZXBzLgogKi8KZnVuY3Rpb24qIHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlucHV0SWQpOwogIGlucHV0RWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlOwoKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIG91dHB1dEVsZW1lbnQuaW5uZXJIVE1MID0gJyc7CgogIGNvbnN0IHBpY2tlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7CiAgICAgIHJlc29sdmUoZS50YXJnZXQuZmlsZXMpOwogICAgfSk7CiAgfSk7CgogIGNvbnN0IGNhbmNlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpOwogIGlucHV0RWxlbWVudC5wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGNhbmNlbCk7CiAgY2FuY2VsLnRleHRDb250ZW50ID0gJ0NhbmNlbCB1cGxvYWQnOwogIGNvbnN0IGNhbmNlbFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgY2FuY2VsLm9uY2xpY2sgPSAoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9OwogIH0pOwoKICAvLyBXYWl0IGZvciB0aGUgdXNlciB0byBwaWNrIHRoZSBmaWxlcy4KICBjb25zdCBmaWxlcyA9IHlpZWxkIHsKICAgIHByb21pc2U6IFByb21pc2UucmFjZShbcGlja2VkUHJvbWlzZSwgY2FuY2VsUHJvbWlzZV0pLAogICAgcmVzcG9uc2U6IHsKICAgICAgYWN0aW9uOiAnc3RhcnRpbmcnLAogICAgfQogIH07CgogIGNhbmNlbC5yZW1vdmUoKTsKCiAgLy8gRGlzYWJsZSB0aGUgaW5wdXQgZWxlbWVudCBzaW5jZSBmdXJ0aGVyIHBpY2tzIGFyZSBub3QgYWxsb3dlZC4KICBpbnB1dEVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlOwoKICBpZiAoIWZpbGVzKSB7CiAgICByZXR1cm4gewogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgICAgfQogICAgfTsKICB9CgogIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykgewogICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpOwogICAgbGkuYXBwZW5kKHNwYW4oZmlsZS5uYW1lLCB7Zm9udFdlaWdodDogJ2JvbGQnfSkpOwogICAgbGkuYXBwZW5kKHNwYW4oCiAgICAgICAgYCgke2ZpbGUudHlwZSB8fCAnbi9hJ30pIC0gJHtmaWxlLnNpemV9IGJ5dGVzLCBgICsKICAgICAgICBgbGFzdCBtb2RpZmllZDogJHsKICAgICAgICAgICAgZmlsZS5sYXN0TW9kaWZpZWREYXRlID8gZmlsZS5sYXN0TW9kaWZpZWREYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ24vYSd9IC0gYCkpOwogICAgY29uc3QgcGVyY2VudCA9IHNwYW4oJzAlIGRvbmUnKTsKICAgIGxpLmFwcGVuZENoaWxkKHBlcmNlbnQpOwoKICAgIG91dHB1dEVsZW1lbnQuYXBwZW5kQ2hpbGQobGkpOwoKICAgIGNvbnN0IGZpbGVEYXRhUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgIHJlYWRlci5vbmxvYWQgPSAoZSkgPT4gewogICAgICAgIHJlc29sdmUoZS50YXJnZXQucmVzdWx0KTsKICAgICAgfTsKICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpOwogICAgfSk7CiAgICAvLyBXYWl0IGZvciB0aGUgZGF0YSB0byBiZSByZWFkeS4KICAgIGxldCBmaWxlRGF0YSA9IHlpZWxkIHsKICAgICAgcHJvbWlzZTogZmlsZURhdGFQcm9taXNlLAogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbnRpbnVlJywKICAgICAgfQogICAgfTsKCiAgICAvLyBVc2UgYSBjaHVua2VkIHNlbmRpbmcgdG8gYXZvaWQgbWVzc2FnZSBzaXplIGxpbWl0cy4gU2VlIGIvNjIxMTU2NjAuCiAgICBsZXQgcG9zaXRpb24gPSAwOwogICAgd2hpbGUgKHBvc2l0aW9uIDwgZmlsZURhdGEuYnl0ZUxlbmd0aCkgewogICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1pbihmaWxlRGF0YS5ieXRlTGVuZ3RoIC0gcG9zaXRpb24sIE1BWF9QQVlMT0FEX1NJWkUpOwogICAgICBjb25zdCBjaHVuayA9IG5ldyBVaW50OEFycmF5KGZpbGVEYXRhLCBwb3NpdGlvbiwgbGVuZ3RoKTsKICAgICAgcG9zaXRpb24gKz0gbGVuZ3RoOwoKICAgICAgY29uc3QgYmFzZTY0ID0gYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGNodW5rKSk7CiAgICAgIHlpZWxkIHsKICAgICAgICByZXNwb25zZTogewogICAgICAgICAgYWN0aW9uOiAnYXBwZW5kJywKICAgICAgICAgIGZpbGU6IGZpbGUubmFtZSwKICAgICAgICAgIGRhdGE6IGJhc2U2NCwKICAgICAgICB9LAogICAgICB9OwogICAgICBwZXJjZW50LnRleHRDb250ZW50ID0KICAgICAgICAgIGAke01hdGgucm91bmQoKHBvc2l0aW9uIC8gZmlsZURhdGEuYnl0ZUxlbmd0aCkgKiAxMDApfSUgZG9uZWA7CiAgICB9CiAgfQoKICAvLyBBbGwgZG9uZS4KICB5aWVsZCB7CiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICB9CiAgfTsKfQoKc2NvcGUuZ29vZ2xlID0gc2NvcGUuZ29vZ2xlIHx8IHt9OwpzY29wZS5nb29nbGUuY29sYWIgPSBzY29wZS5nb29nbGUuY29sYWIgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYi5fZmlsZXMgPSB7CiAgX3VwbG9hZEZpbGVzLAogIF91cGxvYWRGaWxlc0NvbnRpbnVlLAp9Owp9KShzZWxmKTsK",
              "ok": true,
              "headers": [
                [
                  "content-type",
                  "application/javascript"
                ]
              ],
              "status": 200,
              "status_text": ""
            }
          },
          "base_uri": "https://localhost:8080/",
          "height": 72
        },
        "id": "wWLwOFeHfsyM",
        "outputId": "1fdf75f2-10d8-4abb-e307-48eeed3b4d82"
      },
      "source": [
        "from google.colab import files\n",
        "uploaded = files.upload()"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-7094d030-2613-4a9b-ac0a-cc1c3e1d958c\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-7094d030-2613-4a9b-ac0a-cc1c3e1d958c\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script src=\"/nbextensions/google.colab/files.js\"></script> "
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "Saving ADANIPORTS.csv to ADANIPORTS.csv\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "deletable": true,
        "editable": true,
        "scrolled": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Vi4Pv4A6aucG",
        "outputId": "67e78d26-d4d3-447b-8327-02ad7c9ce274"
      },
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "from pandas import datetime\n",
        "import math, time\n",
        "import itertools\n",
        "from sklearn import preprocessing\n",
        "import datetime\n",
        "from operator import itemgetter\n",
        "from sklearn.metrics import mean_squared_error\n",
        "from math import sqrt\n",
        "from keras.models import Sequential,Model\n",
        "from keras.layers.core import Dense, Dropout, Activation\n",
        "from keras.layers.recurrent import LSTM\n",
        "from keras.layers import concatenate\n",
        "from keras.optimizers import Adagrad"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: FutureWarning: The pandas.datetime class is deprecated and will be removed from pandas in a future version. Import from datetime module instead.\n",
            "  after removing the cwd from sys.path.\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "deletable": true,
        "editable": true,
        "id": "pNhxwYr4aucO"
      },
      "source": [
        "* Get the stock data from Yahoo finance as a CSV for any company. \n",
        "\n",
        "* Drop all other columns (Volume, Year, Month and Day) and retain Open, High and Close - since I'm just predicting the close value for a day"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "collapsed": true,
        "deletable": true,
        "editable": true,
        "id": "kHFoTMXlaucP"
      },
      "source": [
        "def get_stock_data(stock_name, normalized=0):\n",
        "    # url = 'http://chart.finance.yahoo.com/table.csv?s=%s&a=11&b=15&c=2011&d=29&e=10&f=2016&g=d&ignore=.csv' % stock_name\n",
        "\n",
        "    # col_names = ['Date','Open','High','Low','Close','Volume','Adj Close']\n",
        "    stocks = pd.read_csv('ADANIPORTS.csv') \n",
        "    df = pd.DataFrame(stocks)\n",
        "    date_split = df['Date'].str.split('-').str\n",
        "    df['Year'], df['Month'], df['Day'] = date_split\n",
        "    df[\"Volume\"] = df[\"Volume\"] / 10000\n",
        "    #df.drop(df.columns[[0,3,5,6, 7,8,9]], axis=1, inplace=True) \n",
        "    return df"
      ],
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "deletable": true,
        "editable": true,
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 360
        },
        "id": "MMmHOex4aucP",
        "outputId": "44e3db41-787c-451e-9736-1fc0fa753edc"
      },
      "source": [
        "stock_name = 'ADANIPORTS'\n",
        "df = get_stock_data(stock_name,0)\n",
        "df.head()"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:8: FutureWarning: Columnar iteration over characters will be deprecated in future releases.\n",
            "  \n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>Symbol</th>\n",
              "      <th>Series</th>\n",
              "      <th>Prev Close</th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Last</th>\n",
              "      <th>Close</th>\n",
              "      <th>VWAP</th>\n",
              "      <th>Volume</th>\n",
              "      <th>Turnover</th>\n",
              "      <th>Trades</th>\n",
              "      <th>Deliverable Volume</th>\n",
              "      <th>%Deliverble</th>\n",
              "      <th>Year</th>\n",
              "      <th>Month</th>\n",
              "      <th>Day</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2007-11-27</td>\n",
              "      <td>MUNDRAPORT</td>\n",
              "      <td>EQ</td>\n",
              "      <td>440.00</td>\n",
              "      <td>770.00</td>\n",
              "      <td>1050.00</td>\n",
              "      <td>770.0</td>\n",
              "      <td>959.0</td>\n",
              "      <td>962.90</td>\n",
              "      <td>984.72</td>\n",
              "      <td>2729.4366</td>\n",
              "      <td>2.687719e+15</td>\n",
              "      <td>NaN</td>\n",
              "      <td>9859619</td>\n",
              "      <td>0.3612</td>\n",
              "      <td>2007</td>\n",
              "      <td>11</td>\n",
              "      <td>27</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2007-11-28</td>\n",
              "      <td>MUNDRAPORT</td>\n",
              "      <td>EQ</td>\n",
              "      <td>962.90</td>\n",
              "      <td>984.00</td>\n",
              "      <td>990.00</td>\n",
              "      <td>874.0</td>\n",
              "      <td>885.0</td>\n",
              "      <td>893.90</td>\n",
              "      <td>941.38</td>\n",
              "      <td>458.1338</td>\n",
              "      <td>4.312765e+14</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1453278</td>\n",
              "      <td>0.3172</td>\n",
              "      <td>2007</td>\n",
              "      <td>11</td>\n",
              "      <td>28</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2007-11-29</td>\n",
              "      <td>MUNDRAPORT</td>\n",
              "      <td>EQ</td>\n",
              "      <td>893.90</td>\n",
              "      <td>909.00</td>\n",
              "      <td>914.75</td>\n",
              "      <td>841.0</td>\n",
              "      <td>887.0</td>\n",
              "      <td>884.20</td>\n",
              "      <td>888.09</td>\n",
              "      <td>512.4121</td>\n",
              "      <td>4.550658e+14</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1069678</td>\n",
              "      <td>0.2088</td>\n",
              "      <td>2007</td>\n",
              "      <td>11</td>\n",
              "      <td>29</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2007-11-30</td>\n",
              "      <td>MUNDRAPORT</td>\n",
              "      <td>EQ</td>\n",
              "      <td>884.20</td>\n",
              "      <td>890.00</td>\n",
              "      <td>958.00</td>\n",
              "      <td>890.0</td>\n",
              "      <td>929.0</td>\n",
              "      <td>921.55</td>\n",
              "      <td>929.17</td>\n",
              "      <td>460.9762</td>\n",
              "      <td>4.283257e+14</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1260913</td>\n",
              "      <td>0.2735</td>\n",
              "      <td>2007</td>\n",
              "      <td>11</td>\n",
              "      <td>30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2007-12-03</td>\n",
              "      <td>MUNDRAPORT</td>\n",
              "      <td>EQ</td>\n",
              "      <td>921.55</td>\n",
              "      <td>939.75</td>\n",
              "      <td>995.00</td>\n",
              "      <td>922.0</td>\n",
              "      <td>980.0</td>\n",
              "      <td>969.30</td>\n",
              "      <td>965.65</td>\n",
              "      <td>297.7470</td>\n",
              "      <td>2.875200e+14</td>\n",
              "      <td>NaN</td>\n",
              "      <td>816123</td>\n",
              "      <td>0.2741</td>\n",
              "      <td>2007</td>\n",
              "      <td>12</td>\n",
              "      <td>03</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "         Date      Symbol Series  Prev Close  ...  %Deliverble  Year  Month  Day\n",
              "0  2007-11-27  MUNDRAPORT     EQ      440.00  ...       0.3612  2007     11   27\n",
              "1  2007-11-28  MUNDRAPORT     EQ      962.90  ...       0.3172  2007     11   28\n",
              "2  2007-11-29  MUNDRAPORT     EQ      893.90  ...       0.2088  2007     11   29\n",
              "3  2007-11-30  MUNDRAPORT     EQ      884.20  ...       0.2735  2007     11   30\n",
              "4  2007-12-03  MUNDRAPORT     EQ      921.55  ...       0.2741  2007     12   03\n",
              "\n",
              "[5 rows x 18 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "deletable": true,
        "editable": true,
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "Yg7oGEeYaucP",
        "outputId": "9645bfb9-9cd1-4ad7-d467-136153613bd8"
      },
      "source": [
        "#df.drop(df.columns[[0,1,2,3,6, 7,9,10,11,12,13,14,15,16,17]], axis=1, inplace=True)\n",
        "df1=df[[ 'High','Low','Turnover','VWAP']]\n",
        "df1.head()"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Turnover</th>\n",
              "      <th>VWAP</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1050.00</td>\n",
              "      <td>770.0</td>\n",
              "      <td>2.687719e+15</td>\n",
              "      <td>984.72</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>990.00</td>\n",
              "      <td>874.0</td>\n",
              "      <td>4.312765e+14</td>\n",
              "      <td>941.38</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>914.75</td>\n",
              "      <td>841.0</td>\n",
              "      <td>4.550658e+14</td>\n",
              "      <td>888.09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>958.00</td>\n",
              "      <td>890.0</td>\n",
              "      <td>4.283257e+14</td>\n",
              "      <td>929.17</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>995.00</td>\n",
              "      <td>922.0</td>\n",
              "      <td>2.875200e+14</td>\n",
              "      <td>965.65</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "      High    Low      Turnover    VWAP\n",
              "0  1050.00  770.0  2.687719e+15  984.72\n",
              "1   990.00  874.0  4.312765e+14  941.38\n",
              "2   914.75  841.0  4.550658e+14  888.09\n",
              "3   958.00  890.0  4.283257e+14  929.17\n",
              "4   995.00  922.0  2.875200e+14  965.65"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hh9un0gffutC"
      },
      "source": [
        ""
      ],
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "deletable": true,
        "editable": true,
        "id": "sGcva2ChaucQ"
      },
      "source": [
        "* Let me save the data to a CSV file so that I can refer later (if needed :) ) "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "deletable": true,
        "editable": true,
        "id": "j0y03s9XaucQ"
      },
      "source": [
        "today = datetime.date.today()\n",
        "filename = stock_name+'_stock_%s.csv' % today\n",
        "df.to_csv(filename)"
      ],
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "deletable": true,
        "editable": true,
        "id": "PUuA7VpjaucR"
      },
      "source": [
        "Normalizing"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "deletable": true,
        "editable": true,
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 326
        },
        "id": "3UqWjGAMaucR",
        "outputId": "615e50b1-9e12-4f7f-ef8b-a775e878cc9d"
      },
      "source": [
        "#Normalization\n",
        "df2=df1\n",
        "df2['Turnover']=df2['Turnover']/100000000000\n",
        "df2.head()"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:3: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  This is separate from the ipykernel package so we can avoid doing imports until\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Turnover</th>\n",
              "      <th>VWAP</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1050.00</td>\n",
              "      <td>770.0</td>\n",
              "      <td>26877.190538</td>\n",
              "      <td>984.72</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>990.00</td>\n",
              "      <td>874.0</td>\n",
              "      <td>4312.765302</td>\n",
              "      <td>941.38</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>914.75</td>\n",
              "      <td>841.0</td>\n",
              "      <td>4550.658463</td>\n",
              "      <td>888.09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>958.00</td>\n",
              "      <td>890.0</td>\n",
              "      <td>4283.256628</td>\n",
              "      <td>929.17</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>995.00</td>\n",
              "      <td>922.0</td>\n",
              "      <td>2875.199743</td>\n",
              "      <td>965.65</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "      High    Low      Turnover    VWAP\n",
              "0  1050.00  770.0  26877.190538  984.72\n",
              "1   990.00  874.0   4312.765302  941.38\n",
              "2   914.75  841.0   4550.658463  888.09\n",
              "3   958.00  890.0   4283.256628  929.17\n",
              "4   995.00  922.0   2875.199743  965.65"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "collapsed": true,
        "deletable": true,
        "editable": true,
        "id": "ghYSxsWPaucS"
      },
      "source": [
        "#Load the data\n",
        "def load_data(stock, seq_len):\n",
        "    amount_of_features = len(stock.columns)\n",
        "    data =  pd.DataFrame(stock) #stock.as_matrix()\n",
        "    sequence_length = seq_len + 1\n",
        "    result = []\n",
        "    for index in range(len(data) - sequence_length):\n",
        "        result.append(data[index: index + sequence_length])\n",
        "\n",
        "    result = np.array(result)\n",
        "    row = round(0.9 * result.shape[0])\n",
        "    train = result[:int(row), :]\n",
        "    x_train = train[:, :-1]\n",
        "    y_train = train[:, -1][:,-1]\n",
        "    x_test = result[int(row):, :-1]\n",
        "    y_test = result[int(row):, -1][:,-1]\n",
        "\n",
        "    x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], amount_of_features))\n",
        "    x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], amount_of_features))  \n",
        "\n",
        "    return [x_train, y_train, x_test, y_test]\n",
        "def load_data2(stock, seq_len):\n",
        "    amount_of_features = len(stock.columns)\n",
        "    data =  pd.DataFrame(stock) #stock.as_matrix()\n",
        "    sequence_length = seq_len + 1\n",
        "    result = []\n",
        "    for index in range(len(data) - sequence_length):\n",
        "        result.append(data[index: index + sequence_length])\n",
        "\n",
        "    result = np.array(result)\n",
        "    row = round(0.9 * result.shape[0])\n",
        "    train = result[:int(row), :]\n",
        "    x_train = train[:, :-1]\n",
        "    y_train = train[:, -1][:,-1]\n",
        "    x_test = result[int(row):, :-1]\n",
        "    y_test = result[int(row):, -1][:,-1]\n",
        "\n",
        "    # x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], amount_of_features))\n",
        "    # x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], amount_of_features))  \n",
        "\n",
        "    return [x_train, y_train, x_test, y_test]"
      ],
      "execution_count": 132,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "collapsed": true,
        "deletable": true,
        "editable": true,
        "id": "bNwbClS3aucS"
      },
      "source": [
        "#Build the model\n",
        "def build_model(layers):\n",
        "    model = Sequential()\n",
        "\n",
        "    model.add(LSTM(\n",
        "        input_dim=layers[0],\n",
        "        output_dim=layers[1],\n",
        "        return_sequences=True))\n",
        "    model.add(Dropout(0.2))\n",
        "\n",
        "    model.add(LSTM(\n",
        "        layers[2],\n",
        "        return_sequences=False))\n",
        "    model.add(Dropout(0.2))\n",
        "\n",
        "    model.add(Dense(\n",
        "        output_dim=layers[2]))\n",
        "    model.add(Activation(\"linear\"))\n",
        "\n",
        "    start = time.time()\n",
        "    model.compile(loss=\"mse\", optimizer=\"rmsprop\",metrics=['accuracy'])\n",
        "    print(\"Compilation Time : \", time.time() - start)\n",
        "    return model\n",
        "\n",
        "def build_model2(layers):\n",
        "        d = 0.2\n",
        "        model = Sequential()\n",
        "        model.add(LSTM(128, input_shape=(layers[1], layers[0]), return_sequences=True))\n",
        "        model.add(Dropout(d))\n",
        "        model.add(LSTM(64, input_shape=(layers[1], layers[0]), return_sequences=False))\n",
        "        model.add(Dropout(d))\n",
        "        model.add(Dense(16,activation='relu'))        \n",
        "        model.add(Dense(1,activation='linear'))\n",
        "        model.compile(loss='mse',optimizer='adam',metrics=['accuracy'])\n",
        "        return model\n",
        "        "
      ],
      "execution_count": 130,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rJFsCIO_fuOV"
      },
      "source": [
        ""
      ],
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BWz5veJ4aucS"
      },
      "source": [
        "Divide as Training and Test set"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "deletable": true,
        "editable": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gtb0ThodaucT",
        "outputId": "15480681-3be2-407f-c605-1d7e6f58ec7d"
      },
      "source": [
        "window = 22\n",
        "X_train, y_train, X_test, y_test = load_data(df2[::1], window)\n",
        "print(\"X_train\", X_train)\n",
        "print(\"y_train\", y_train)\n",
        "print(\"X_test\", X_test.shape)\n",
        "print(\"y_test\", y_test.shape)\n",
        "print(\"\",X_train[23])"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "X_train [[[ 1050.           770.         26877.19053785   984.72      ]\n",
            "  [  990.           874.          4312.76530165   941.38      ]\n",
            "  [  914.75         841.          4550.65846265   888.09      ]\n",
            "  ...\n",
            "  [ 1214.          1148.          1735.9385654   1183.3       ]\n",
            "  [ 1240.          1204.          1195.06465945  1222.58      ]\n",
            "  [ 1274.          1175.          1421.7728054   1221.31      ]]\n",
            "\n",
            " [[  990.           874.          4312.76530165   941.38      ]\n",
            "  [  914.75         841.          4550.65846265   888.09      ]\n",
            "  [  958.           890.          4283.2566283    929.17      ]\n",
            "  ...\n",
            "  [ 1240.          1204.          1195.06465945  1222.58      ]\n",
            "  [ 1274.          1175.          1421.7728054   1221.31      ]\n",
            "  [ 1295.          1261.           941.94213815  1277.64      ]]\n",
            "\n",
            " [[  914.75         841.          4550.65846265   888.09      ]\n",
            "  [  958.           890.          4283.2566283    929.17      ]\n",
            "  [  995.           922.          2875.199743     965.65      ]\n",
            "  ...\n",
            "  [ 1274.          1175.          1421.7728054   1221.31      ]\n",
            "  [ 1295.          1261.           941.94213815  1277.64      ]\n",
            "  [ 1319.          1263.7          631.734621    1285.72      ]]\n",
            "\n",
            " ...\n",
            "\n",
            " [[  408.8          402.35         820.0489022    405.36      ]\n",
            "  [  413.7          403.9          711.03447145   410.3       ]\n",
            "  [  419.4          409.6         1169.6208442    414.97      ]\n",
            "  ...\n",
            "  [  378.6          365.25        1390.6836859    373.92      ]\n",
            "  [  379.55         365.65        1270.2248784    371.45      ]\n",
            "  [  379.5          367.45        1268.15421295   373.21      ]]\n",
            "\n",
            " [[  413.7          403.9          711.03447145   410.3       ]\n",
            "  [  419.4          409.6         1169.6208442    414.97      ]\n",
            "  [  416.2          408.1         1071.5443685    411.88      ]\n",
            "  ...\n",
            "  [  379.55         365.65        1270.2248784    371.45      ]\n",
            "  [  379.5          367.45        1268.15421295   373.21      ]\n",
            "  [  380.5          374.25         839.03515495   377.43      ]]\n",
            "\n",
            " [[  419.4          409.6         1169.6208442    414.97      ]\n",
            "  [  416.2          408.1         1071.5443685    411.88      ]\n",
            "  [  421.5          407.65         873.6465494    413.75      ]\n",
            "  ...\n",
            "  [  379.5          367.45        1268.15421295   373.21      ]\n",
            "  [  380.5          374.25         839.03515495   377.43      ]\n",
            "  [  379.55         359.1          949.8866774    368.63      ]]]\n",
            "y_train [1277.64 1285.72 1302.15 ...  377.43  368.63  359.82]\n",
            "X_test (320, 22, 4)\n",
            "y_test (320,)\n",
            " [[1319.         1263.7         631.734621   1285.72      ]\n",
            " [1324.         1270.          916.47340425 1302.15      ]\n",
            " [1314.7        1261.15        651.14250075 1289.24      ]\n",
            " [1294.8        1233.          691.8167434  1256.03      ]\n",
            " [1278.9        1215.          785.39769975 1244.76      ]\n",
            " [1255.         1185.          645.6595127  1217.08      ]\n",
            " [1210.         1151.          738.1831333  1176.37      ]\n",
            " [1199.8        1110.          507.4524659  1156.44      ]\n",
            " [1130.         1063.          671.09272025 1087.78      ]\n",
            " [1082.4        1031.1         871.35710755 1042.4       ]\n",
            " [1078.7        1036.05        872.5933711  1050.69      ]\n",
            " [1064.         1000.          843.00609685 1032.86      ]\n",
            " [1053.5        1011.          347.334909   1033.73      ]\n",
            " [1072.          974.9         692.13280915 1022.57      ]\n",
            " [1005.          795.7         694.59899855  880.77      ]\n",
            " [ 810.          660.05        384.06113705  703.2       ]\n",
            " [ 881.9         760.          438.3652698   818.67      ]\n",
            " [ 935.          812.          436.83319425  854.83      ]\n",
            " [ 883.          820.          346.8033386   858.33      ]\n",
            " [ 835.          783.2         375.6855238   804.38      ]\n",
            " [ 860.          820.05        185.13823345  841.27      ]\n",
            " [ 864.          822.25        238.6311066   833.82      ]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "deletable": true,
        "editable": true,
        "id": "5Ar_FBh1aucT"
      },
      "source": [
        "# model = build_model([3,lag,1])\n",
        "model = build_model2([4,window,1])"
      ],
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "czg-gX0VaucT"
      },
      "source": [
        "Execute the trained model"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "deletable": true,
        "editable": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TK8KSZakaucU",
        "outputId": "9e42eef0-eeb0-47ea-b3b9-50e48e05c932"
      },
      "source": [
        "\n",
        "model.fit(\n",
        "    X_train,\n",
        "    y_train,\n",
        "    batch_size=512,\n",
        "    epochs=500,\n",
        "    validation_split=0.1,\n",
        "    verbose=1)"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/500\n",
            "6/6 [==============================] - 5s 374ms/step - loss: 145349.8438 - accuracy: 0.0000e+00 - val_loss: 137628.1406 - val_accuracy: 0.0000e+00\n",
            "Epoch 2/500\n",
            "6/6 [==============================] - 1s 229ms/step - loss: 143265.7835 - accuracy: 0.0000e+00 - val_loss: 135958.3594 - val_accuracy: 0.0000e+00\n",
            "Epoch 3/500\n",
            "6/6 [==============================] - 1s 231ms/step - loss: 142298.9420 - accuracy: 0.0000e+00 - val_loss: 133803.0625 - val_accuracy: 0.0000e+00\n",
            "Epoch 4/500\n",
            "6/6 [==============================] - 1s 226ms/step - loss: 140377.9643 - accuracy: 0.0000e+00 - val_loss: 131944.2344 - val_accuracy: 0.0000e+00\n",
            "Epoch 5/500\n",
            "6/6 [==============================] - 1s 230ms/step - loss: 139209.6473 - accuracy: 0.0000e+00 - val_loss: 130050.5312 - val_accuracy: 0.0000e+00\n",
            "Epoch 6/500\n",
            "6/6 [==============================] - 1s 223ms/step - loss: 139271.2299 - accuracy: 0.0000e+00 - val_loss: 128261.7344 - val_accuracy: 0.0000e+00\n",
            "Epoch 7/500\n",
            "6/6 [==============================] - 1s 228ms/step - loss: 134561.4688 - accuracy: 0.0000e+00 - val_loss: 126645.0312 - val_accuracy: 0.0000e+00\n",
            "Epoch 8/500\n",
            "6/6 [==============================] - 1s 222ms/step - loss: 135687.8125 - accuracy: 0.0000e+00 - val_loss: 125165.1406 - val_accuracy: 0.0000e+00\n",
            "Epoch 9/500\n",
            "6/6 [==============================] - 1s 229ms/step - loss: 129741.1596 - accuracy: 0.0000e+00 - val_loss: 123730.4297 - val_accuracy: 0.0000e+00\n",
            "Epoch 10/500\n",
            "6/6 [==============================] - 1s 227ms/step - loss: 129713.5938 - accuracy: 0.0000e+00 - val_loss: 122292.9141 - val_accuracy: 0.0000e+00\n",
            "Epoch 11/500\n",
            "6/6 [==============================] - 1s 226ms/step - loss: 130222.1696 - accuracy: 0.0000e+00 - val_loss: 120864.9141 - val_accuracy: 0.0000e+00\n",
            "Epoch 12/500\n",
            "6/6 [==============================] - 1s 226ms/step - loss: 129404.9609 - accuracy: 0.0000e+00 - val_loss: 119440.5391 - val_accuracy: 0.0000e+00\n",
            "Epoch 13/500\n",
            "6/6 [==============================] - 1s 223ms/step - loss: 126401.3181 - accuracy: 0.0000e+00 - val_loss: 118027.0547 - val_accuracy: 0.0000e+00\n",
            "Epoch 14/500\n",
            "6/6 [==============================] - 1s 223ms/step - loss: 126940.6708 - accuracy: 0.0000e+00 - val_loss: 116600.6250 - val_accuracy: 0.0000e+00\n",
            "Epoch 15/500\n",
            "6/6 [==============================] - 1s 225ms/step - loss: 125037.0335 - accuracy: 0.0000e+00 - val_loss: 115175.5312 - val_accuracy: 0.0000e+00\n",
            "Epoch 16/500\n",
            "6/6 [==============================] - 1s 230ms/step - loss: 125285.7232 - accuracy: 0.0000e+00 - val_loss: 113742.5938 - val_accuracy: 0.0000e+00\n",
            "Epoch 17/500\n",
            "6/6 [==============================] - 1s 228ms/step - loss: 122334.3203 - accuracy: 0.0000e+00 - val_loss: 112295.5938 - val_accuracy: 0.0000e+00\n",
            "Epoch 18/500\n",
            "6/6 [==============================] - 1s 227ms/step - loss: 121946.8092 - accuracy: 0.0000e+00 - val_loss: 110819.0938 - val_accuracy: 0.0000e+00\n",
            "Epoch 19/500\n",
            "6/6 [==============================] - 1s 241ms/step - loss: 119521.6908 - accuracy: 0.0000e+00 - val_loss: 109326.2891 - val_accuracy: 0.0000e+00\n",
            "Epoch 20/500\n",
            "6/6 [==============================] - 1s 229ms/step - loss: 121440.6283 - accuracy: 0.0000e+00 - val_loss: 107792.9609 - val_accuracy: 0.0000e+00\n",
            "Epoch 21/500\n",
            "6/6 [==============================] - 1s 230ms/step - loss: 118847.2712 - accuracy: 0.0000e+00 - val_loss: 106260.0000 - val_accuracy: 0.0000e+00\n",
            "Epoch 22/500\n",
            "6/6 [==============================] - 1s 227ms/step - loss: 117222.2020 - accuracy: 0.0000e+00 - val_loss: 104712.0078 - val_accuracy: 0.0000e+00\n",
            "Epoch 23/500\n",
            "6/6 [==============================] - 1s 226ms/step - loss: 116566.3203 - accuracy: 0.0000e+00 - val_loss: 103138.7031 - val_accuracy: 0.0000e+00\n",
            "Epoch 24/500\n",
            "6/6 [==============================] - 1s 225ms/step - loss: 113615.6585 - accuracy: 0.0000e+00 - val_loss: 101538.5078 - val_accuracy: 0.0000e+00\n",
            "Epoch 25/500\n",
            "6/6 [==============================] - 1s 223ms/step - loss: 113543.4252 - accuracy: 0.0000e+00 - val_loss: 99939.1250 - val_accuracy: 0.0000e+00\n",
            "Epoch 26/500\n",
            "6/6 [==============================] - 1s 230ms/step - loss: 112084.9029 - accuracy: 0.0000e+00 - val_loss: 98332.4531 - val_accuracy: 0.0000e+00\n",
            "Epoch 27/500\n",
            "6/6 [==============================] - 1s 228ms/step - loss: 111909.6741 - accuracy: 0.0000e+00 - val_loss: 96717.6484 - val_accuracy: 0.0000e+00\n",
            "Epoch 28/500\n",
            "6/6 [==============================] - 1s 224ms/step - loss: 106401.6808 - accuracy: 0.0000e+00 - val_loss: 95107.5156 - val_accuracy: 0.0000e+00\n",
            "Epoch 29/500\n",
            "6/6 [==============================] - 1s 231ms/step - loss: 106635.9710 - accuracy: 0.0000e+00 - val_loss: 93476.4531 - val_accuracy: 0.0000e+00\n",
            "Epoch 30/500\n",
            "6/6 [==============================] - 1s 229ms/step - loss: 104821.0815 - accuracy: 0.0000e+00 - val_loss: 91832.7734 - val_accuracy: 0.0000e+00\n",
            "Epoch 31/500\n",
            "6/6 [==============================] - 1s 224ms/step - loss: 103015.4554 - accuracy: 0.0000e+00 - val_loss: 90163.0312 - val_accuracy: 0.0000e+00\n",
            "Epoch 32/500\n",
            "6/6 [==============================] - 1s 226ms/step - loss: 106639.8404 - accuracy: 0.0000e+00 - val_loss: 88477.6562 - val_accuracy: 0.0000e+00\n",
            "Epoch 33/500\n",
            "6/6 [==============================] - 1s 223ms/step - loss: 101141.5982 - accuracy: 0.0000e+00 - val_loss: 86779.5000 - val_accuracy: 0.0000e+00\n",
            "Epoch 34/500\n",
            "6/6 [==============================] - 1s 229ms/step - loss: 99475.4185 - accuracy: 0.0000e+00 - val_loss: 85092.5625 - val_accuracy: 0.0000e+00\n",
            "Epoch 35/500\n",
            "6/6 [==============================] - 1s 225ms/step - loss: 98472.3527 - accuracy: 0.0000e+00 - val_loss: 83356.0391 - val_accuracy: 0.0000e+00\n",
            "Epoch 36/500\n",
            "6/6 [==============================] - 1s 223ms/step - loss: 97611.3203 - accuracy: 0.0000e+00 - val_loss: 81547.4688 - val_accuracy: 0.0000e+00\n",
            "Epoch 37/500\n",
            "6/6 [==============================] - 1s 226ms/step - loss: 96860.5871 - accuracy: 0.0000e+00 - val_loss: 79701.1641 - val_accuracy: 0.0000e+00\n",
            "Epoch 38/500\n",
            "6/6 [==============================] - 1s 222ms/step - loss: 96827.6395 - accuracy: 0.0000e+00 - val_loss: 77806.0391 - val_accuracy: 0.0000e+00\n",
            "Epoch 39/500\n",
            "6/6 [==============================] - 1s 221ms/step - loss: 91850.6942 - accuracy: 0.0000e+00 - val_loss: 75924.5391 - val_accuracy: 0.0000e+00\n",
            "Epoch 40/500\n",
            "6/6 [==============================] - 1s 222ms/step - loss: 91797.3103 - accuracy: 0.0000e+00 - val_loss: 74061.5078 - val_accuracy: 0.0000e+00\n",
            "Epoch 41/500\n",
            "6/6 [==============================] - 1s 228ms/step - loss: 90109.8929 - accuracy: 0.0000e+00 - val_loss: 72190.1250 - val_accuracy: 0.0000e+00\n",
            "Epoch 42/500\n",
            "6/6 [==============================] - 1s 224ms/step - loss: 86786.6540 - accuracy: 0.0000e+00 - val_loss: 70325.5938 - val_accuracy: 0.0000e+00\n",
            "Epoch 43/500\n",
            "6/6 [==============================] - 1s 223ms/step - loss: 88474.0134 - accuracy: 0.0000e+00 - val_loss: 68473.9453 - val_accuracy: 0.0000e+00\n",
            "Epoch 44/500\n",
            "6/6 [==============================] - 1s 221ms/step - loss: 83882.4721 - accuracy: 0.0000e+00 - val_loss: 66632.5156 - val_accuracy: 0.0000e+00\n",
            "Epoch 45/500\n",
            "6/6 [==============================] - 1s 232ms/step - loss: 84940.2991 - accuracy: 0.0000e+00 - val_loss: 64771.0977 - val_accuracy: 0.0000e+00\n",
            "Epoch 46/500\n",
            "6/6 [==============================] - 1s 232ms/step - loss: 81820.8783 - accuracy: 0.0000e+00 - val_loss: 62941.0352 - val_accuracy: 0.0000e+00\n",
            "Epoch 47/500\n",
            "6/6 [==============================] - 1s 222ms/step - loss: 76984.1283 - accuracy: 0.0000e+00 - val_loss: 61142.4570 - val_accuracy: 0.0000e+00\n",
            "Epoch 48/500\n",
            "6/6 [==============================] - 1s 225ms/step - loss: 79102.9051 - accuracy: 0.0000e+00 - val_loss: 59323.5820 - val_accuracy: 0.0000e+00\n",
            "Epoch 49/500\n",
            "6/6 [==============================] - 1s 224ms/step - loss: 76852.0268 - accuracy: 0.0000e+00 - val_loss: 57535.3555 - val_accuracy: 0.0000e+00\n",
            "Epoch 50/500\n",
            "6/6 [==============================] - 1s 226ms/step - loss: 74425.2924 - accuracy: 0.0000e+00 - val_loss: 55767.6523 - val_accuracy: 0.0000e+00\n",
            "Epoch 51/500\n",
            "6/6 [==============================] - 1s 222ms/step - loss: 74440.0279 - accuracy: 0.0000e+00 - val_loss: 54025.4648 - val_accuracy: 0.0000e+00\n",
            "Epoch 52/500\n",
            "6/6 [==============================] - 1s 226ms/step - loss: 72889.6931 - accuracy: 0.0000e+00 - val_loss: 52306.8906 - val_accuracy: 0.0000e+00\n",
            "Epoch 53/500\n",
            "6/6 [==============================] - 1s 224ms/step - loss: 72445.9598 - accuracy: 0.0000e+00 - val_loss: 50611.6094 - val_accuracy: 0.0000e+00\n",
            "Epoch 54/500\n",
            "6/6 [==============================] - 1s 224ms/step - loss: 70042.4074 - accuracy: 0.0000e+00 - val_loss: 48932.8125 - val_accuracy: 0.0000e+00\n",
            "Epoch 55/500\n",
            "6/6 [==============================] - 1s 222ms/step - loss: 70664.5993 - accuracy: 0.0000e+00 - val_loss: 47262.7305 - val_accuracy: 0.0000e+00\n",
            "Epoch 56/500\n",
            "6/6 [==============================] - 1s 229ms/step - loss: 69641.1786 - accuracy: 0.0000e+00 - val_loss: 45646.8906 - val_accuracy: 0.0000e+00\n",
            "Epoch 57/500\n",
            "6/6 [==============================] - 1s 227ms/step - loss: 65776.0971 - accuracy: 0.0000e+00 - val_loss: 44103.9570 - val_accuracy: 0.0000e+00\n",
            "Epoch 58/500\n",
            "6/6 [==============================] - 1s 225ms/step - loss: 67883.2355 - accuracy: 0.0000e+00 - val_loss: 42632.0000 - val_accuracy: 0.0000e+00\n",
            "Epoch 59/500\n",
            "6/6 [==============================] - 1s 230ms/step - loss: 65908.7227 - accuracy: 0.0000e+00 - val_loss: 41171.6328 - val_accuracy: 0.0000e+00\n",
            "Epoch 60/500\n",
            "6/6 [==============================] - 1s 231ms/step - loss: 62590.3627 - accuracy: 0.0000e+00 - val_loss: 39746.4648 - val_accuracy: 0.0000e+00\n",
            "Epoch 61/500\n",
            "6/6 [==============================] - 1s 224ms/step - loss: 61682.9944 - accuracy: 0.0000e+00 - val_loss: 38347.7148 - val_accuracy: 0.0000e+00\n",
            "Epoch 62/500\n",
            "6/6 [==============================] - 1s 227ms/step - loss: 60786.7327 - accuracy: 0.0000e+00 - val_loss: 36947.9414 - val_accuracy: 0.0000e+00\n",
            "Epoch 63/500\n",
            "6/6 [==============================] - 1s 229ms/step - loss: 60162.0932 - accuracy: 0.0000e+00 - val_loss: 35569.1328 - val_accuracy: 0.0000e+00\n",
            "Epoch 64/500\n",
            "6/6 [==============================] - 1s 234ms/step - loss: 58652.8750 - accuracy: 0.0000e+00 - val_loss: 34213.9219 - val_accuracy: 0.0000e+00\n",
            "Epoch 65/500\n",
            "6/6 [==============================] - 1s 231ms/step - loss: 58632.8912 - accuracy: 0.0000e+00 - val_loss: 32873.8281 - val_accuracy: 0.0000e+00\n",
            "Epoch 66/500\n",
            "6/6 [==============================] - 1s 226ms/step - loss: 59323.2388 - accuracy: 0.0000e+00 - val_loss: 31572.4160 - val_accuracy: 0.0000e+00\n",
            "Epoch 67/500\n",
            "6/6 [==============================] - 1s 225ms/step - loss: 57265.5603 - accuracy: 0.0000e+00 - val_loss: 30305.0898 - val_accuracy: 0.0000e+00\n",
            "Epoch 68/500\n",
            "6/6 [==============================] - 1s 225ms/step - loss: 55048.7762 - accuracy: 0.0000e+00 - val_loss: 29078.7051 - val_accuracy: 0.0000e+00\n",
            "Epoch 69/500\n",
            "6/6 [==============================] - 1s 222ms/step - loss: 53496.1378 - accuracy: 0.0000e+00 - val_loss: 27915.3711 - val_accuracy: 0.0000e+00\n",
            "Epoch 70/500\n",
            "6/6 [==============================] - 1s 223ms/step - loss: 51827.6177 - accuracy: 0.0000e+00 - val_loss: 26785.0000 - val_accuracy: 0.0000e+00\n",
            "Epoch 71/500\n",
            "6/6 [==============================] - 1s 227ms/step - loss: 52717.6071 - accuracy: 0.0000e+00 - val_loss: 25632.8594 - val_accuracy: 0.0000e+00\n",
            "Epoch 72/500\n",
            "6/6 [==============================] - 1s 225ms/step - loss: 51849.1317 - accuracy: 0.0000e+00 - val_loss: 24513.7422 - val_accuracy: 0.0000e+00\n",
            "Epoch 73/500\n",
            "6/6 [==============================] - 1s 221ms/step - loss: 53113.0954 - accuracy: 0.0000e+00 - val_loss: 23452.9688 - val_accuracy: 0.0000e+00\n",
            "Epoch 74/500\n",
            "6/6 [==============================] - 1s 225ms/step - loss: 50608.8661 - accuracy: 0.0000e+00 - val_loss: 22480.7246 - val_accuracy: 0.0000e+00\n",
            "Epoch 75/500\n",
            "6/6 [==============================] - 1s 225ms/step - loss: 49252.8979 - accuracy: 0.0000e+00 - val_loss: 21539.7188 - val_accuracy: 0.0000e+00\n",
            "Epoch 76/500\n",
            "6/6 [==============================] - 1s 235ms/step - loss: 48843.4135 - accuracy: 0.0000e+00 - val_loss: 20653.2715 - val_accuracy: 0.0000e+00\n",
            "Epoch 77/500\n",
            "6/6 [==============================] - 1s 237ms/step - loss: 50559.3717 - accuracy: 0.0000e+00 - val_loss: 19767.2188 - val_accuracy: 0.0000e+00\n",
            "Epoch 78/500\n",
            "6/6 [==============================] - 1s 224ms/step - loss: 46361.9950 - accuracy: 0.0000e+00 - val_loss: 18953.1543 - val_accuracy: 0.0000e+00\n",
            "Epoch 79/500\n",
            "6/6 [==============================] - 1s 232ms/step - loss: 47753.6395 - accuracy: 0.0000e+00 - val_loss: 18155.3613 - val_accuracy: 0.0000e+00\n",
            "Epoch 80/500\n",
            "6/6 [==============================] - 1s 226ms/step - loss: 47610.2623 - accuracy: 0.0000e+00 - val_loss: 17384.8477 - val_accuracy: 0.0000e+00\n",
            "Epoch 81/500\n",
            "6/6 [==============================] - 1s 230ms/step - loss: 45638.5011 - accuracy: 0.0000e+00 - val_loss: 16641.1211 - val_accuracy: 0.0000e+00\n",
            "Epoch 82/500\n",
            "6/6 [==============================] - 1s 222ms/step - loss: 45568.9280 - accuracy: 0.0000e+00 - val_loss: 15891.3164 - val_accuracy: 0.0000e+00\n",
            "Epoch 83/500\n",
            "6/6 [==============================] - 1s 224ms/step - loss: 45802.7132 - accuracy: 0.0000e+00 - val_loss: 15164.9268 - val_accuracy: 0.0000e+00\n",
            "Epoch 84/500\n",
            "6/6 [==============================] - 1s 227ms/step - loss: 42683.1127 - accuracy: 0.0000e+00 - val_loss: 14512.6875 - val_accuracy: 0.0000e+00\n",
            "Epoch 85/500\n",
            "6/6 [==============================] - 1s 232ms/step - loss: 44292.6523 - accuracy: 0.0000e+00 - val_loss: 13858.3105 - val_accuracy: 0.0000e+00\n",
            "Epoch 86/500\n",
            "6/6 [==============================] - 1s 235ms/step - loss: 44345.4570 - accuracy: 0.0000e+00 - val_loss: 13238.5273 - val_accuracy: 0.0000e+00\n",
            "Epoch 87/500\n",
            "6/6 [==============================] - 1s 228ms/step - loss: 44124.5000 - accuracy: 0.0000e+00 - val_loss: 12645.8662 - val_accuracy: 0.0000e+00\n",
            "Epoch 88/500\n",
            "6/6 [==============================] - 1s 230ms/step - loss: 43412.5837 - accuracy: 0.0000e+00 - val_loss: 12117.2402 - val_accuracy: 0.0000e+00\n",
            "Epoch 89/500\n",
            "6/6 [==============================] - 1s 231ms/step - loss: 44177.0530 - accuracy: 0.0000e+00 - val_loss: 11611.5869 - val_accuracy: 0.0000e+00\n",
            "Epoch 90/500\n",
            "6/6 [==============================] - 1s 242ms/step - loss: 43662.6574 - accuracy: 0.0000e+00 - val_loss: 11110.5449 - val_accuracy: 0.0000e+00\n",
            "Epoch 91/500\n",
            "6/6 [==============================] - 2s 275ms/step - loss: 40573.0357 - accuracy: 0.0000e+00 - val_loss: 10631.3340 - val_accuracy: 0.0000e+00\n",
            "Epoch 92/500\n",
            "6/6 [==============================] - 2s 273ms/step - loss: 43492.0575 - accuracy: 0.0000e+00 - val_loss: 10157.2910 - val_accuracy: 0.0000e+00\n",
            "Epoch 93/500\n",
            "6/6 [==============================] - 2s 276ms/step - loss: 40927.2634 - accuracy: 0.0000e+00 - val_loss: 9747.4082 - val_accuracy: 0.0000e+00\n",
            "Epoch 94/500\n",
            "6/6 [==============================] - 2s 280ms/step - loss: 40955.8242 - accuracy: 0.0000e+00 - val_loss: 9331.1836 - val_accuracy: 0.0000e+00\n",
            "Epoch 95/500\n",
            "6/6 [==============================] - 2s 345ms/step - loss: 41197.8940 - accuracy: 0.0000e+00 - val_loss: 8913.8076 - val_accuracy: 0.0000e+00\n",
            "Epoch 96/500\n",
            "6/6 [==============================] - 2s 245ms/step - loss: 41560.3996 - accuracy: 0.0000e+00 - val_loss: 8533.0820 - val_accuracy: 0.0000e+00\n",
            "Epoch 97/500\n",
            "6/6 [==============================] - 1s 230ms/step - loss: 43331.2600 - accuracy: 0.0000e+00 - val_loss: 8201.0586 - val_accuracy: 0.0000e+00\n",
            "Epoch 98/500\n",
            "6/6 [==============================] - 1s 239ms/step - loss: 41829.0056 - accuracy: 0.0000e+00 - val_loss: 7880.2441 - val_accuracy: 0.0000e+00\n",
            "Epoch 99/500\n",
            "6/6 [==============================] - 1s 230ms/step - loss: 41249.0725 - accuracy: 0.0000e+00 - val_loss: 7588.2603 - val_accuracy: 0.0000e+00\n",
            "Epoch 100/500\n",
            "6/6 [==============================] - 2s 267ms/step - loss: 41494.4051 - accuracy: 0.0000e+00 - val_loss: 7307.9062 - val_accuracy: 0.0000e+00\n",
            "Epoch 101/500\n",
            "6/6 [==============================] - 1s 239ms/step - loss: 42771.7606 - accuracy: 0.0000e+00 - val_loss: 7062.4351 - val_accuracy: 0.0000e+00\n",
            "Epoch 102/500\n",
            "6/6 [==============================] - 1s 232ms/step - loss: 40755.7394 - accuracy: 0.0000e+00 - val_loss: 6817.2949 - val_accuracy: 0.0000e+00\n",
            "Epoch 103/500\n",
            "6/6 [==============================] - 1s 222ms/step - loss: 42509.7874 - accuracy: 0.0000e+00 - val_loss: 6605.0708 - val_accuracy: 0.0000e+00\n",
            "Epoch 104/500\n",
            "6/6 [==============================] - 1s 233ms/step - loss: 40212.3315 - accuracy: 0.0000e+00 - val_loss: 6394.2271 - val_accuracy: 0.0000e+00\n",
            "Epoch 105/500\n",
            "6/6 [==============================] - 1s 237ms/step - loss: 41791.2478 - accuracy: 0.0000e+00 - val_loss: 6183.3403 - val_accuracy: 0.0000e+00\n",
            "Epoch 106/500\n",
            "6/6 [==============================] - 1s 233ms/step - loss: 40447.2617 - accuracy: 0.0000e+00 - val_loss: 5980.2759 - val_accuracy: 0.0000e+00\n",
            "Epoch 107/500\n",
            "6/6 [==============================] - 1s 227ms/step - loss: 42317.3538 - accuracy: 0.0000e+00 - val_loss: 5758.4941 - val_accuracy: 0.0000e+00\n",
            "Epoch 108/500\n",
            "6/6 [==============================] - 1s 231ms/step - loss: 40299.3276 - accuracy: 0.0000e+00 - val_loss: 5561.1919 - val_accuracy: 0.0000e+00\n",
            "Epoch 109/500\n",
            "6/6 [==============================] - 1s 221ms/step - loss: 41703.7483 - accuracy: 0.0000e+00 - val_loss: 5383.0488 - val_accuracy: 0.0000e+00\n",
            "Epoch 110/500\n",
            "6/6 [==============================] - 1s 228ms/step - loss: 40192.5882 - accuracy: 0.0000e+00 - val_loss: 5244.7422 - val_accuracy: 0.0000e+00\n",
            "Epoch 111/500\n",
            "6/6 [==============================] - 1s 223ms/step - loss: 39701.6724 - accuracy: 0.0000e+00 - val_loss: 5117.1162 - val_accuracy: 0.0000e+00\n",
            "Epoch 112/500\n",
            "6/6 [==============================] - 1s 222ms/step - loss: 39740.3521 - accuracy: 0.0000e+00 - val_loss: 5695.0625 - val_accuracy: 0.0000e+00\n",
            "Epoch 113/500\n",
            "6/6 [==============================] - 1s 232ms/step - loss: 41279.7662 - accuracy: 0.0000e+00 - val_loss: 5716.8101 - val_accuracy: 0.0000e+00\n",
            "Epoch 114/500\n",
            "6/6 [==============================] - 1s 229ms/step - loss: 38184.8711 - accuracy: 0.0000e+00 - val_loss: 5058.1104 - val_accuracy: 0.0000e+00\n",
            "Epoch 115/500\n",
            "6/6 [==============================] - 1s 226ms/step - loss: 40566.2824 - accuracy: 0.0000e+00 - val_loss: 6390.5186 - val_accuracy: 0.0000e+00\n",
            "Epoch 116/500\n",
            "6/6 [==============================] - 1s 224ms/step - loss: 37640.9554 - accuracy: 0.0000e+00 - val_loss: 5509.1982 - val_accuracy: 0.0000e+00\n",
            "Epoch 117/500\n",
            "6/6 [==============================] - 1s 229ms/step - loss: 36926.2444 - accuracy: 0.0000e+00 - val_loss: 5093.3101 - val_accuracy: 0.0000e+00\n",
            "Epoch 118/500\n",
            "6/6 [==============================] - 1s 223ms/step - loss: 35822.5530 - accuracy: 0.0000e+00 - val_loss: 4678.2656 - val_accuracy: 0.0000e+00\n",
            "Epoch 119/500\n",
            "6/6 [==============================] - 1s 228ms/step - loss: 34813.4369 - accuracy: 0.0000e+00 - val_loss: 4403.7368 - val_accuracy: 0.0000e+00\n",
            "Epoch 120/500\n",
            "6/6 [==============================] - 1s 224ms/step - loss: 32294.3546 - accuracy: 0.0000e+00 - val_loss: 7952.2241 - val_accuracy: 0.0000e+00\n",
            "Epoch 121/500\n",
            "6/6 [==============================] - 1s 226ms/step - loss: 32444.9732 - accuracy: 0.0000e+00 - val_loss: 5443.8784 - val_accuracy: 0.0000e+00\n",
            "Epoch 122/500\n",
            "6/6 [==============================] - 1s 227ms/step - loss: 30304.7254 - accuracy: 0.0000e+00 - val_loss: 3934.5049 - val_accuracy: 0.0000e+00\n",
            "Epoch 123/500\n",
            "6/6 [==============================] - 1s 233ms/step - loss: 29919.2215 - accuracy: 0.0000e+00 - val_loss: 5508.2222 - val_accuracy: 0.0000e+00\n",
            "Epoch 124/500\n",
            "6/6 [==============================] - 1s 227ms/step - loss: 27258.3848 - accuracy: 0.0000e+00 - val_loss: 2558.6868 - val_accuracy: 0.0000e+00\n",
            "Epoch 125/500\n",
            "6/6 [==============================] - 1s 225ms/step - loss: 28993.0505 - accuracy: 0.0000e+00 - val_loss: 2953.7371 - val_accuracy: 0.0000e+00\n",
            "Epoch 126/500\n",
            "6/6 [==============================] - 1s 223ms/step - loss: 27742.9082 - accuracy: 0.0000e+00 - val_loss: 3617.1863 - val_accuracy: 0.0000e+00\n",
            "Epoch 127/500\n",
            "6/6 [==============================] - 1s 226ms/step - loss: 25893.2690 - accuracy: 0.0000e+00 - val_loss: 6371.9072 - val_accuracy: 0.0000e+00\n",
            "Epoch 128/500\n",
            "6/6 [==============================] - 1s 232ms/step - loss: 24667.8630 - accuracy: 0.0000e+00 - val_loss: 2105.1670 - val_accuracy: 0.0000e+00\n",
            "Epoch 129/500\n",
            "6/6 [==============================] - 1s 228ms/step - loss: 25313.0605 - accuracy: 0.0000e+00 - val_loss: 3529.2988 - val_accuracy: 0.0000e+00\n",
            "Epoch 130/500\n",
            "6/6 [==============================] - 1s 241ms/step - loss: 23585.7260 - accuracy: 0.0000e+00 - val_loss: 1198.4380 - val_accuracy: 0.0000e+00\n",
            "Epoch 131/500\n",
            "6/6 [==============================] - 1s 229ms/step - loss: 23797.3892 - accuracy: 0.0000e+00 - val_loss: 969.1098 - val_accuracy: 0.0000e+00\n",
            "Epoch 132/500\n",
            "6/6 [==============================] - 1s 226ms/step - loss: 23829.8382 - accuracy: 0.0000e+00 - val_loss: 1019.0601 - val_accuracy: 0.0000e+00\n",
            "Epoch 133/500\n",
            "6/6 [==============================] - 1s 228ms/step - loss: 22704.8758 - accuracy: 0.0000e+00 - val_loss: 1550.3514 - val_accuracy: 0.0000e+00\n",
            "Epoch 134/500\n",
            "6/6 [==============================] - 1s 234ms/step - loss: 21299.0042 - accuracy: 0.0000e+00 - val_loss: 2427.9756 - val_accuracy: 0.0000e+00\n",
            "Epoch 135/500\n",
            "6/6 [==============================] - 1s 240ms/step - loss: 22021.1691 - accuracy: 0.0000e+00 - val_loss: 1059.9338 - val_accuracy: 0.0000e+00\n",
            "Epoch 136/500\n",
            "6/6 [==============================] - 1s 221ms/step - loss: 22275.1032 - accuracy: 0.0000e+00 - val_loss: 611.5497 - val_accuracy: 0.0000e+00\n",
            "Epoch 137/500\n",
            "6/6 [==============================] - 1s 226ms/step - loss: 19950.3856 - accuracy: 0.0000e+00 - val_loss: 722.2372 - val_accuracy: 0.0000e+00\n",
            "Epoch 138/500\n",
            "6/6 [==============================] - 1s 231ms/step - loss: 20193.0737 - accuracy: 0.0000e+00 - val_loss: 1654.8599 - val_accuracy: 0.0000e+00\n",
            "Epoch 139/500\n",
            "6/6 [==============================] - 1s 233ms/step - loss: 19951.2480 - accuracy: 0.0000e+00 - val_loss: 890.7712 - val_accuracy: 0.0000e+00\n",
            "Epoch 140/500\n",
            "6/6 [==============================] - 1s 227ms/step - loss: 19441.6345 - accuracy: 0.0000e+00 - val_loss: 757.6387 - val_accuracy: 0.0000e+00\n",
            "Epoch 141/500\n",
            "6/6 [==============================] - 1s 235ms/step - loss: 19363.8348 - accuracy: 0.0000e+00 - val_loss: 1017.5012 - val_accuracy: 0.0000e+00\n",
            "Epoch 142/500\n",
            "6/6 [==============================] - 1s 229ms/step - loss: 18724.2525 - accuracy: 0.0000e+00 - val_loss: 856.9291 - val_accuracy: 0.0000e+00\n",
            "Epoch 143/500\n",
            "6/6 [==============================] - 1s 230ms/step - loss: 18920.5145 - accuracy: 0.0000e+00 - val_loss: 1234.6490 - val_accuracy: 0.0000e+00\n",
            "Epoch 144/500\n",
            "6/6 [==============================] - 1s 244ms/step - loss: 18222.2946 - accuracy: 0.0000e+00 - val_loss: 700.1396 - val_accuracy: 0.0000e+00\n",
            "Epoch 145/500\n",
            "6/6 [==============================] - 1s 232ms/step - loss: 17354.2667 - accuracy: 0.0000e+00 - val_loss: 1114.1501 - val_accuracy: 0.0000e+00\n",
            "Epoch 146/500\n",
            "6/6 [==============================] - 1s 232ms/step - loss: 16499.4537 - accuracy: 0.0000e+00 - val_loss: 1031.1519 - val_accuracy: 0.0000e+00\n",
            "Epoch 147/500\n",
            "6/6 [==============================] - 1s 230ms/step - loss: 15411.5073 - accuracy: 0.0000e+00 - val_loss: 1330.3833 - val_accuracy: 0.0000e+00\n",
            "Epoch 148/500\n",
            "6/6 [==============================] - 1s 235ms/step - loss: 16030.8426 - accuracy: 0.0000e+00 - val_loss: 865.1093 - val_accuracy: 0.0000e+00\n",
            "Epoch 149/500\n",
            "6/6 [==============================] - 1s 223ms/step - loss: 15203.9689 - accuracy: 0.0000e+00 - val_loss: 1108.7218 - val_accuracy: 0.0000e+00\n",
            "Epoch 150/500\n",
            "6/6 [==============================] - 1s 228ms/step - loss: 15608.5573 - accuracy: 0.0000e+00 - val_loss: 1121.9896 - val_accuracy: 0.0000e+00\n",
            "Epoch 151/500\n",
            "6/6 [==============================] - 1s 224ms/step - loss: 14430.0388 - accuracy: 0.0000e+00 - val_loss: 892.2766 - val_accuracy: 0.0000e+00\n",
            "Epoch 152/500\n",
            "6/6 [==============================] - 1s 224ms/step - loss: 14186.6310 - accuracy: 0.0000e+00 - val_loss: 1025.8331 - val_accuracy: 0.0000e+00\n",
            "Epoch 153/500\n",
            "6/6 [==============================] - 1s 230ms/step - loss: 13817.8793 - accuracy: 0.0000e+00 - val_loss: 735.7382 - val_accuracy: 0.0000e+00\n",
            "Epoch 154/500\n",
            "6/6 [==============================] - 1s 232ms/step - loss: 14574.6169 - accuracy: 0.0000e+00 - val_loss: 788.4849 - val_accuracy: 0.0000e+00\n",
            "Epoch 155/500\n",
            "6/6 [==============================] - 1s 227ms/step - loss: 13485.5089 - accuracy: 0.0000e+00 - val_loss: 915.7339 - val_accuracy: 0.0000e+00\n",
            "Epoch 156/500\n",
            "6/6 [==============================] - 1s 224ms/step - loss: 13550.3513 - accuracy: 0.0000e+00 - val_loss: 1057.7170 - val_accuracy: 0.0000e+00\n",
            "Epoch 157/500\n",
            "6/6 [==============================] - 1s 225ms/step - loss: 12958.8414 - accuracy: 0.0000e+00 - val_loss: 1001.2320 - val_accuracy: 0.0000e+00\n",
            "Epoch 158/500\n",
            "6/6 [==============================] - 1s 229ms/step - loss: 13413.0653 - accuracy: 0.0000e+00 - val_loss: 874.8530 - val_accuracy: 0.0000e+00\n",
            "Epoch 159/500\n",
            "6/6 [==============================] - 1s 223ms/step - loss: 13602.3785 - accuracy: 0.0000e+00 - val_loss: 657.2600 - val_accuracy: 0.0000e+00\n",
            "Epoch 160/500\n",
            "6/6 [==============================] - 1s 227ms/step - loss: 12534.4757 - accuracy: 0.0000e+00 - val_loss: 465.3765 - val_accuracy: 0.0000e+00\n",
            "Epoch 161/500\n",
            "6/6 [==============================] - 1s 229ms/step - loss: 12691.0148 - accuracy: 0.0000e+00 - val_loss: 1446.5978 - val_accuracy: 0.0000e+00\n",
            "Epoch 162/500\n",
            "6/6 [==============================] - 1s 226ms/step - loss: 11647.3782 - accuracy: 0.0000e+00 - val_loss: 760.6994 - val_accuracy: 0.0000e+00\n",
            "Epoch 163/500\n",
            "6/6 [==============================] - 1s 223ms/step - loss: 11250.6318 - accuracy: 0.0000e+00 - val_loss: 1021.1555 - val_accuracy: 0.0000e+00\n",
            "Epoch 164/500\n",
            "6/6 [==============================] - 1s 227ms/step - loss: 11079.2621 - accuracy: 0.0000e+00 - val_loss: 719.1480 - val_accuracy: 0.0000e+00\n",
            "Epoch 165/500\n",
            "6/6 [==============================] - 1s 232ms/step - loss: 10598.7366 - accuracy: 0.0000e+00 - val_loss: 1393.6176 - val_accuracy: 0.0000e+00\n",
            "Epoch 166/500\n",
            "6/6 [==============================] - 1s 229ms/step - loss: 11198.0876 - accuracy: 0.0000e+00 - val_loss: 745.2775 - val_accuracy: 0.0000e+00\n",
            "Epoch 167/500\n",
            "6/6 [==============================] - 1s 228ms/step - loss: 11340.5668 - accuracy: 0.0000e+00 - val_loss: 385.9897 - val_accuracy: 0.0000e+00\n",
            "Epoch 168/500\n",
            "6/6 [==============================] - 1s 220ms/step - loss: 10876.7132 - accuracy: 0.0000e+00 - val_loss: 466.3057 - val_accuracy: 0.0000e+00\n",
            "Epoch 169/500\n",
            "6/6 [==============================] - 1s 224ms/step - loss: 10475.4964 - accuracy: 0.0000e+00 - val_loss: 533.9240 - val_accuracy: 0.0000e+00\n",
            "Epoch 170/500\n",
            "6/6 [==============================] - 1s 229ms/step - loss: 9487.1301 - accuracy: 0.0000e+00 - val_loss: 488.4916 - val_accuracy: 0.0000e+00\n",
            "Epoch 171/500\n",
            "6/6 [==============================] - 1s 230ms/step - loss: 10535.1077 - accuracy: 0.0000e+00 - val_loss: 1197.3311 - val_accuracy: 0.0000e+00\n",
            "Epoch 172/500\n",
            "6/6 [==============================] - 1s 225ms/step - loss: 9790.4530 - accuracy: 0.0000e+00 - val_loss: 469.8618 - val_accuracy: 0.0000e+00\n",
            "Epoch 173/500\n",
            "6/6 [==============================] - 1s 228ms/step - loss: 10044.4920 - accuracy: 0.0000e+00 - val_loss: 1454.6506 - val_accuracy: 0.0000e+00\n",
            "Epoch 174/500\n",
            "6/6 [==============================] - 1s 226ms/step - loss: 9313.1261 - accuracy: 0.0000e+00 - val_loss: 869.6848 - val_accuracy: 0.0000e+00\n",
            "Epoch 175/500\n",
            "6/6 [==============================] - 1s 226ms/step - loss: 8725.6550 - accuracy: 0.0000e+00 - val_loss: 728.9519 - val_accuracy: 0.0000e+00\n",
            "Epoch 176/500\n",
            "6/6 [==============================] - 1s 236ms/step - loss: 9184.2773 - accuracy: 0.0000e+00 - val_loss: 763.3672 - val_accuracy: 0.0000e+00\n",
            "Epoch 177/500\n",
            "6/6 [==============================] - 1s 232ms/step - loss: 9157.1869 - accuracy: 0.0000e+00 - val_loss: 996.0805 - val_accuracy: 0.0000e+00\n",
            "Epoch 178/500\n",
            "6/6 [==============================] - 1s 228ms/step - loss: 8102.5116 - accuracy: 0.0000e+00 - val_loss: 633.9436 - val_accuracy: 0.0000e+00\n",
            "Epoch 179/500\n",
            "6/6 [==============================] - 1s 228ms/step - loss: 8360.7840 - accuracy: 0.0000e+00 - val_loss: 1094.9744 - val_accuracy: 0.0000e+00\n",
            "Epoch 180/500\n",
            "6/6 [==============================] - 1s 224ms/step - loss: 9098.9254 - accuracy: 0.0000e+00 - val_loss: 1274.1450 - val_accuracy: 0.0000e+00\n",
            "Epoch 181/500\n",
            "6/6 [==============================] - 1s 231ms/step - loss: 8010.7399 - accuracy: 0.0000e+00 - val_loss: 447.3371 - val_accuracy: 0.0000e+00\n",
            "Epoch 182/500\n",
            "6/6 [==============================] - 1s 228ms/step - loss: 8348.4584 - accuracy: 0.0000e+00 - val_loss: 567.4382 - val_accuracy: 0.0000e+00\n",
            "Epoch 183/500\n",
            "6/6 [==============================] - 1s 235ms/step - loss: 7904.5995 - accuracy: 0.0000e+00 - val_loss: 1623.1505 - val_accuracy: 0.0000e+00\n",
            "Epoch 184/500\n",
            "6/6 [==============================] - 1s 233ms/step - loss: 8094.1620 - accuracy: 0.0000e+00 - val_loss: 442.3594 - val_accuracy: 0.0000e+00\n",
            "Epoch 185/500\n",
            "6/6 [==============================] - 1s 229ms/step - loss: 8334.5130 - accuracy: 0.0000e+00 - val_loss: 330.7816 - val_accuracy: 0.0000e+00\n",
            "Epoch 186/500\n",
            "6/6 [==============================] - 1s 225ms/step - loss: 8122.7824 - accuracy: 0.0000e+00 - val_loss: 417.6190 - val_accuracy: 0.0000e+00\n",
            "Epoch 187/500\n",
            "6/6 [==============================] - 1s 234ms/step - loss: 7855.5025 - accuracy: 0.0000e+00 - val_loss: 1581.9575 - val_accuracy: 0.0000e+00\n",
            "Epoch 188/500\n",
            "6/6 [==============================] - 1s 228ms/step - loss: 7194.2483 - accuracy: 0.0000e+00 - val_loss: 1302.4171 - val_accuracy: 0.0000e+00\n",
            "Epoch 189/500\n",
            "6/6 [==============================] - 1s 232ms/step - loss: 7851.9360 - accuracy: 0.0000e+00 - val_loss: 534.4059 - val_accuracy: 0.0000e+00\n",
            "Epoch 190/500\n",
            "6/6 [==============================] - 1s 231ms/step - loss: 6987.6043 - accuracy: 0.0000e+00 - val_loss: 500.0627 - val_accuracy: 0.0000e+00\n",
            "Epoch 191/500\n",
            "6/6 [==============================] - 1s 219ms/step - loss: 6723.2130 - accuracy: 0.0000e+00 - val_loss: 511.6884 - val_accuracy: 0.0000e+00\n",
            "Epoch 192/500\n",
            "6/6 [==============================] - 1s 226ms/step - loss: 6067.2364 - accuracy: 0.0000e+00 - val_loss: 436.7840 - val_accuracy: 0.0000e+00\n",
            "Epoch 193/500\n",
            "6/6 [==============================] - 1s 222ms/step - loss: 7158.3603 - accuracy: 0.0000e+00 - val_loss: 787.5275 - val_accuracy: 0.0000e+00\n",
            "Epoch 194/500\n",
            "6/6 [==============================] - 1s 224ms/step - loss: 7562.8239 - accuracy: 0.0000e+00 - val_loss: 425.9669 - val_accuracy: 0.0000e+00\n",
            "Epoch 195/500\n",
            "6/6 [==============================] - 1s 228ms/step - loss: 6738.1226 - accuracy: 0.0000e+00 - val_loss: 415.6420 - val_accuracy: 0.0000e+00\n",
            "Epoch 196/500\n",
            "6/6 [==============================] - 1s 227ms/step - loss: 6013.8870 - accuracy: 0.0000e+00 - val_loss: 611.4354 - val_accuracy: 0.0000e+00\n",
            "Epoch 197/500\n",
            "6/6 [==============================] - 1s 228ms/step - loss: 6488.6869 - accuracy: 0.0000e+00 - val_loss: 450.4550 - val_accuracy: 0.0000e+00\n",
            "Epoch 198/500\n",
            "6/6 [==============================] - 1s 226ms/step - loss: 6079.8364 - accuracy: 0.0000e+00 - val_loss: 412.9272 - val_accuracy: 0.0000e+00\n",
            "Epoch 199/500\n",
            "6/6 [==============================] - 1s 232ms/step - loss: 5864.5196 - accuracy: 0.0000e+00 - val_loss: 399.2205 - val_accuracy: 0.0000e+00\n",
            "Epoch 200/500\n",
            "6/6 [==============================] - 1s 232ms/step - loss: 6599.9503 - accuracy: 0.0000e+00 - val_loss: 441.8488 - val_accuracy: 0.0000e+00\n",
            "Epoch 201/500\n",
            "6/6 [==============================] - 1s 234ms/step - loss: 6334.2725 - accuracy: 0.0000e+00 - val_loss: 539.1806 - val_accuracy: 0.0000e+00\n",
            "Epoch 202/500\n",
            "6/6 [==============================] - 1s 229ms/step - loss: 6306.2596 - accuracy: 0.0000e+00 - val_loss: 374.1026 - val_accuracy: 0.0000e+00\n",
            "Epoch 203/500\n",
            "6/6 [==============================] - 1s 233ms/step - loss: 5890.5859 - accuracy: 0.0000e+00 - val_loss: 659.1301 - val_accuracy: 0.0000e+00\n",
            "Epoch 204/500\n",
            "6/6 [==============================] - 1s 231ms/step - loss: 5827.8548 - accuracy: 0.0000e+00 - val_loss: 504.4338 - val_accuracy: 0.0000e+00\n",
            "Epoch 205/500\n",
            "6/6 [==============================] - 1s 233ms/step - loss: 5664.7298 - accuracy: 0.0000e+00 - val_loss: 435.0104 - val_accuracy: 0.0000e+00\n",
            "Epoch 206/500\n",
            "6/6 [==============================] - 1s 225ms/step - loss: 6056.9091 - accuracy: 0.0000e+00 - val_loss: 314.1458 - val_accuracy: 0.0000e+00\n",
            "Epoch 207/500\n",
            "6/6 [==============================] - 1s 228ms/step - loss: 5211.0637 - accuracy: 0.0000e+00 - val_loss: 353.3551 - val_accuracy: 0.0000e+00\n",
            "Epoch 208/500\n",
            "6/6 [==============================] - 1s 231ms/step - loss: 5746.7687 - accuracy: 0.0000e+00 - val_loss: 399.7007 - val_accuracy: 0.0000e+00\n",
            "Epoch 209/500\n",
            "6/6 [==============================] - 1s 227ms/step - loss: 6025.0335 - accuracy: 0.0000e+00 - val_loss: 441.7755 - val_accuracy: 0.0000e+00\n",
            "Epoch 210/500\n",
            "6/6 [==============================] - 1s 224ms/step - loss: 5079.6118 - accuracy: 0.0000e+00 - val_loss: 353.1861 - val_accuracy: 0.0000e+00\n",
            "Epoch 211/500\n",
            "6/6 [==============================] - 1s 227ms/step - loss: 5029.9249 - accuracy: 0.0000e+00 - val_loss: 608.4067 - val_accuracy: 0.0000e+00\n",
            "Epoch 212/500\n",
            "6/6 [==============================] - 1s 222ms/step - loss: 5372.2601 - accuracy: 0.0000e+00 - val_loss: 566.2632 - val_accuracy: 0.0000e+00\n",
            "Epoch 213/500\n",
            "6/6 [==============================] - 1s 230ms/step - loss: 6122.3692 - accuracy: 0.0000e+00 - val_loss: 2408.5161 - val_accuracy: 0.0000e+00\n",
            "Epoch 214/500\n",
            "6/6 [==============================] - 1s 229ms/step - loss: 5154.7780 - accuracy: 0.0000e+00 - val_loss: 467.9692 - val_accuracy: 0.0000e+00\n",
            "Epoch 215/500\n",
            "6/6 [==============================] - 1s 230ms/step - loss: 5265.7766 - accuracy: 0.0000e+00 - val_loss: 549.4173 - val_accuracy: 0.0000e+00\n",
            "Epoch 216/500\n",
            "6/6 [==============================] - 1s 221ms/step - loss: 5996.7741 - accuracy: 0.0000e+00 - val_loss: 734.7991 - val_accuracy: 0.0000e+00\n",
            "Epoch 217/500\n",
            "6/6 [==============================] - 1s 223ms/step - loss: 5144.2674 - accuracy: 0.0000e+00 - val_loss: 384.4858 - val_accuracy: 0.0000e+00\n",
            "Epoch 218/500\n",
            "6/6 [==============================] - 1s 225ms/step - loss: 5724.7796 - accuracy: 0.0000e+00 - val_loss: 1128.3716 - val_accuracy: 0.0000e+00\n",
            "Epoch 219/500\n",
            "6/6 [==============================] - 1s 230ms/step - loss: 5522.3734 - accuracy: 0.0000e+00 - val_loss: 337.0211 - val_accuracy: 0.0000e+00\n",
            "Epoch 220/500\n",
            "6/6 [==============================] - 1s 231ms/step - loss: 5045.8735 - accuracy: 0.0000e+00 - val_loss: 475.4958 - val_accuracy: 0.0000e+00\n",
            "Epoch 221/500\n",
            "6/6 [==============================] - 1s 228ms/step - loss: 5869.9091 - accuracy: 0.0000e+00 - val_loss: 464.7184 - val_accuracy: 0.0000e+00\n",
            "Epoch 222/500\n",
            "6/6 [==============================] - 1s 223ms/step - loss: 5406.0128 - accuracy: 0.0000e+00 - val_loss: 317.6669 - val_accuracy: 0.0000e+00\n",
            "Epoch 223/500\n",
            "6/6 [==============================] - 1s 231ms/step - loss: 5176.1892 - accuracy: 0.0000e+00 - val_loss: 364.3016 - val_accuracy: 0.0000e+00\n",
            "Epoch 224/500\n",
            "6/6 [==============================] - 1s 230ms/step - loss: 4317.4352 - accuracy: 0.0000e+00 - val_loss: 332.5666 - val_accuracy: 0.0000e+00\n",
            "Epoch 225/500\n",
            "6/6 [==============================] - 1s 224ms/step - loss: 5414.3742 - accuracy: 0.0000e+00 - val_loss: 401.2890 - val_accuracy: 0.0000e+00\n",
            "Epoch 226/500\n",
            "6/6 [==============================] - 1s 225ms/step - loss: 4838.5979 - accuracy: 0.0000e+00 - val_loss: 468.4486 - val_accuracy: 0.0000e+00\n",
            "Epoch 227/500\n",
            "6/6 [==============================] - 1s 221ms/step - loss: 4469.6401 - accuracy: 0.0000e+00 - val_loss: 1014.5048 - val_accuracy: 0.0000e+00\n",
            "Epoch 228/500\n",
            "6/6 [==============================] - 1s 226ms/step - loss: 4713.3507 - accuracy: 0.0000e+00 - val_loss: 434.1050 - val_accuracy: 0.0000e+00\n",
            "Epoch 229/500\n",
            "6/6 [==============================] - 1s 235ms/step - loss: 4567.0779 - accuracy: 0.0000e+00 - val_loss: 577.4504 - val_accuracy: 0.0000e+00\n",
            "Epoch 230/500\n",
            "6/6 [==============================] - 1s 223ms/step - loss: 4430.3608 - accuracy: 0.0000e+00 - val_loss: 665.2488 - val_accuracy: 0.0000e+00\n",
            "Epoch 231/500\n",
            "6/6 [==============================] - 1s 230ms/step - loss: 4654.5975 - accuracy: 0.0000e+00 - val_loss: 424.8932 - val_accuracy: 0.0000e+00\n",
            "Epoch 232/500\n",
            "6/6 [==============================] - 1s 223ms/step - loss: 4675.9196 - accuracy: 0.0000e+00 - val_loss: 372.3024 - val_accuracy: 0.0000e+00\n",
            "Epoch 233/500\n",
            "6/6 [==============================] - 1s 224ms/step - loss: 4620.9549 - accuracy: 0.0000e+00 - val_loss: 477.3130 - val_accuracy: 0.0000e+00\n",
            "Epoch 234/500\n",
            "6/6 [==============================] - 1s 226ms/step - loss: 4501.8627 - accuracy: 0.0000e+00 - val_loss: 340.5533 - val_accuracy: 0.0000e+00\n",
            "Epoch 235/500\n",
            "6/6 [==============================] - 1s 223ms/step - loss: 4337.6604 - accuracy: 0.0000e+00 - val_loss: 816.2395 - val_accuracy: 0.0000e+00\n",
            "Epoch 236/500\n",
            "6/6 [==============================] - 1s 226ms/step - loss: 4092.8869 - accuracy: 0.0000e+00 - val_loss: 541.4929 - val_accuracy: 0.0000e+00\n",
            "Epoch 237/500\n",
            "6/6 [==============================] - 1s 239ms/step - loss: 4263.5508 - accuracy: 0.0000e+00 - val_loss: 286.8642 - val_accuracy: 0.0000e+00\n",
            "Epoch 238/500\n",
            "6/6 [==============================] - 1s 230ms/step - loss: 4402.2721 - accuracy: 0.0000e+00 - val_loss: 360.9959 - val_accuracy: 0.0000e+00\n",
            "Epoch 239/500\n",
            "6/6 [==============================] - 1s 229ms/step - loss: 4178.5587 - accuracy: 0.0000e+00 - val_loss: 348.1817 - val_accuracy: 0.0000e+00\n",
            "Epoch 240/500\n",
            "6/6 [==============================] - 1s 228ms/step - loss: 3974.5491 - accuracy: 0.0000e+00 - val_loss: 470.5872 - val_accuracy: 0.0000e+00\n",
            "Epoch 241/500\n",
            "6/6 [==============================] - 1s 230ms/step - loss: 4179.1572 - accuracy: 0.0000e+00 - val_loss: 655.2874 - val_accuracy: 0.0000e+00\n",
            "Epoch 242/500\n",
            "6/6 [==============================] - 1s 231ms/step - loss: 4380.0430 - accuracy: 0.0000e+00 - val_loss: 570.4344 - val_accuracy: 0.0000e+00\n",
            "Epoch 243/500\n",
            "6/6 [==============================] - 1s 232ms/step - loss: 4467.0746 - accuracy: 0.0000e+00 - val_loss: 307.8459 - val_accuracy: 0.0000e+00\n",
            "Epoch 244/500\n",
            "6/6 [==============================] - 1s 238ms/step - loss: 4289.5022 - accuracy: 0.0000e+00 - val_loss: 619.5048 - val_accuracy: 0.0000e+00\n",
            "Epoch 245/500\n",
            "6/6 [==============================] - 1s 225ms/step - loss: 3637.4655 - accuracy: 0.0000e+00 - val_loss: 456.8039 - val_accuracy: 0.0000e+00\n",
            "Epoch 246/500\n",
            "6/6 [==============================] - 1s 227ms/step - loss: 4107.4568 - accuracy: 0.0000e+00 - val_loss: 326.0196 - val_accuracy: 0.0000e+00\n",
            "Epoch 247/500\n",
            "6/6 [==============================] - 1s 232ms/step - loss: 4114.3390 - accuracy: 0.0000e+00 - val_loss: 733.1614 - val_accuracy: 0.0000e+00\n",
            "Epoch 248/500\n",
            "6/6 [==============================] - 1s 231ms/step - loss: 3934.8886 - accuracy: 0.0000e+00 - val_loss: 946.0103 - val_accuracy: 0.0000e+00\n",
            "Epoch 249/500\n",
            "6/6 [==============================] - 1s 227ms/step - loss: 4375.4328 - accuracy: 0.0000e+00 - val_loss: 374.2590 - val_accuracy: 0.0000e+00\n",
            "Epoch 250/500\n",
            "6/6 [==============================] - 1s 223ms/step - loss: 3990.3065 - accuracy: 0.0000e+00 - val_loss: 417.2947 - val_accuracy: 0.0000e+00\n",
            "Epoch 251/500\n",
            "6/6 [==============================] - 1s 230ms/step - loss: 4238.3842 - accuracy: 0.0000e+00 - val_loss: 477.5286 - val_accuracy: 0.0000e+00\n",
            "Epoch 252/500\n",
            "6/6 [==============================] - 1s 228ms/step - loss: 3609.0970 - accuracy: 0.0000e+00 - val_loss: 361.4681 - val_accuracy: 0.0000e+00\n",
            "Epoch 253/500\n",
            "6/6 [==============================] - 1s 223ms/step - loss: 3501.0814 - accuracy: 0.0000e+00 - val_loss: 485.6774 - val_accuracy: 0.0000e+00\n",
            "Epoch 254/500\n",
            "6/6 [==============================] - 1s 226ms/step - loss: 3786.9817 - accuracy: 0.0000e+00 - val_loss: 258.5232 - val_accuracy: 0.0000e+00\n",
            "Epoch 255/500\n",
            "6/6 [==============================] - 1s 229ms/step - loss: 3676.2723 - accuracy: 0.0000e+00 - val_loss: 379.8048 - val_accuracy: 0.0000e+00\n",
            "Epoch 256/500\n",
            "6/6 [==============================] - 1s 231ms/step - loss: 3684.0952 - accuracy: 0.0000e+00 - val_loss: 542.4060 - val_accuracy: 0.0000e+00\n",
            "Epoch 257/500\n",
            "6/6 [==============================] - 1s 229ms/step - loss: 3511.3984 - accuracy: 0.0000e+00 - val_loss: 274.7151 - val_accuracy: 0.0000e+00\n",
            "Epoch 258/500\n",
            "6/6 [==============================] - 1s 229ms/step - loss: 3587.5578 - accuracy: 0.0000e+00 - val_loss: 297.2321 - val_accuracy: 0.0000e+00\n",
            "Epoch 259/500\n",
            "6/6 [==============================] - 1s 234ms/step - loss: 3615.7902 - accuracy: 0.0000e+00 - val_loss: 458.8766 - val_accuracy: 0.0000e+00\n",
            "Epoch 260/500\n",
            "6/6 [==============================] - 1s 238ms/step - loss: 3530.9544 - accuracy: 0.0000e+00 - val_loss: 455.6885 - val_accuracy: 0.0000e+00\n",
            "Epoch 261/500\n",
            "6/6 [==============================] - 1s 229ms/step - loss: 3439.2045 - accuracy: 0.0000e+00 - val_loss: 1194.3524 - val_accuracy: 0.0000e+00\n",
            "Epoch 262/500\n",
            "6/6 [==============================] - 1s 236ms/step - loss: 4253.9369 - accuracy: 0.0000e+00 - val_loss: 574.8118 - val_accuracy: 0.0000e+00\n",
            "Epoch 263/500\n",
            "6/6 [==============================] - 1s 224ms/step - loss: 3216.3913 - accuracy: 0.0000e+00 - val_loss: 638.2964 - val_accuracy: 0.0000e+00\n",
            "Epoch 264/500\n",
            "6/6 [==============================] - 1s 229ms/step - loss: 3758.7033 - accuracy: 0.0000e+00 - val_loss: 1416.6093 - val_accuracy: 0.0000e+00\n",
            "Epoch 265/500\n",
            "6/6 [==============================] - 1s 228ms/step - loss: 3947.2656 - accuracy: 0.0000e+00 - val_loss: 1954.6323 - val_accuracy: 0.0000e+00\n",
            "Epoch 266/500\n",
            "6/6 [==============================] - 1s 228ms/step - loss: 4809.1318 - accuracy: 0.0000e+00 - val_loss: 741.6565 - val_accuracy: 0.0000e+00\n",
            "Epoch 267/500\n",
            "6/6 [==============================] - 1s 236ms/step - loss: 4075.4332 - accuracy: 0.0000e+00 - val_loss: 3244.0959 - val_accuracy: 0.0000e+00\n",
            "Epoch 268/500\n",
            "6/6 [==============================] - 1s 229ms/step - loss: 4099.6099 - accuracy: 0.0000e+00 - val_loss: 499.5550 - val_accuracy: 0.0000e+00\n",
            "Epoch 269/500\n",
            "6/6 [==============================] - 1s 225ms/step - loss: 3679.7553 - accuracy: 0.0000e+00 - val_loss: 1597.0237 - val_accuracy: 0.0000e+00\n",
            "Epoch 270/500\n",
            "6/6 [==============================] - 1s 232ms/step - loss: 3799.2493 - accuracy: 0.0000e+00 - val_loss: 387.3359 - val_accuracy: 0.0000e+00\n",
            "Epoch 271/500\n",
            "6/6 [==============================] - 1s 231ms/step - loss: 3629.2702 - accuracy: 0.0000e+00 - val_loss: 527.1476 - val_accuracy: 0.0000e+00\n",
            "Epoch 272/500\n",
            "6/6 [==============================] - 1s 228ms/step - loss: 3552.4298 - accuracy: 0.0000e+00 - val_loss: 367.2531 - val_accuracy: 0.0000e+00\n",
            "Epoch 273/500\n",
            "6/6 [==============================] - 1s 228ms/step - loss: 2865.2494 - accuracy: 0.0000e+00 - val_loss: 452.5674 - val_accuracy: 0.0000e+00\n",
            "Epoch 274/500\n",
            "6/6 [==============================] - 2s 244ms/step - loss: 3384.0085 - accuracy: 0.0000e+00 - val_loss: 520.9193 - val_accuracy: 0.0000e+00\n",
            "Epoch 275/500\n",
            "6/6 [==============================] - 1s 226ms/step - loss: 3883.8116 - accuracy: 0.0000e+00 - val_loss: 326.1991 - val_accuracy: 0.0000e+00\n",
            "Epoch 276/500\n",
            "6/6 [==============================] - 1s 224ms/step - loss: 3312.0748 - accuracy: 0.0000e+00 - val_loss: 815.1761 - val_accuracy: 0.0000e+00\n",
            "Epoch 277/500\n",
            "6/6 [==============================] - 1s 225ms/step - loss: 3104.2363 - accuracy: 0.0000e+00 - val_loss: 648.7261 - val_accuracy: 0.0000e+00\n",
            "Epoch 278/500\n",
            "6/6 [==============================] - 1s 225ms/step - loss: 3708.7283 - accuracy: 0.0000e+00 - val_loss: 661.2331 - val_accuracy: 0.0000e+00\n",
            "Epoch 279/500\n",
            "6/6 [==============================] - 1s 227ms/step - loss: 3228.9385 - accuracy: 0.0000e+00 - val_loss: 367.9179 - val_accuracy: 0.0000e+00\n",
            "Epoch 280/500\n",
            "6/6 [==============================] - 1s 222ms/step - loss: 3157.2623 - accuracy: 0.0000e+00 - val_loss: 348.1782 - val_accuracy: 0.0000e+00\n",
            "Epoch 281/500\n",
            "6/6 [==============================] - 1s 230ms/step - loss: 3007.6976 - accuracy: 0.0000e+00 - val_loss: 424.5509 - val_accuracy: 0.0000e+00\n",
            "Epoch 282/500\n",
            "6/6 [==============================] - 1s 234ms/step - loss: 3446.6181 - accuracy: 0.0000e+00 - val_loss: 1037.6956 - val_accuracy: 0.0000e+00\n",
            "Epoch 283/500\n",
            "6/6 [==============================] - 1s 226ms/step - loss: 3396.5232 - accuracy: 0.0000e+00 - val_loss: 844.8370 - val_accuracy: 0.0000e+00\n",
            "Epoch 284/500\n",
            "6/6 [==============================] - 1s 225ms/step - loss: 3173.9767 - accuracy: 0.0000e+00 - val_loss: 473.3564 - val_accuracy: 0.0000e+00\n",
            "Epoch 285/500\n",
            "6/6 [==============================] - 1s 231ms/step - loss: 2960.8361 - accuracy: 0.0000e+00 - val_loss: 477.4836 - val_accuracy: 0.0000e+00\n",
            "Epoch 286/500\n",
            "6/6 [==============================] - 1s 221ms/step - loss: 3571.8764 - accuracy: 0.0000e+00 - val_loss: 631.7861 - val_accuracy: 0.0000e+00\n",
            "Epoch 287/500\n",
            "6/6 [==============================] - 1s 224ms/step - loss: 3191.5307 - accuracy: 0.0000e+00 - val_loss: 606.4184 - val_accuracy: 0.0000e+00\n",
            "Epoch 288/500\n",
            "6/6 [==============================] - 1s 227ms/step - loss: 3498.7604 - accuracy: 0.0000e+00 - val_loss: 468.9808 - val_accuracy: 0.0000e+00\n",
            "Epoch 289/500\n",
            "6/6 [==============================] - 1s 229ms/step - loss: 3303.9237 - accuracy: 0.0000e+00 - val_loss: 414.3931 - val_accuracy: 0.0000e+00\n",
            "Epoch 290/500\n",
            "6/6 [==============================] - 1s 223ms/step - loss: 2801.6394 - accuracy: 0.0000e+00 - val_loss: 700.0958 - val_accuracy: 0.0000e+00\n",
            "Epoch 291/500\n",
            "6/6 [==============================] - 1s 223ms/step - loss: 2782.9685 - accuracy: 0.0000e+00 - val_loss: 559.5125 - val_accuracy: 0.0000e+00\n",
            "Epoch 292/500\n",
            "6/6 [==============================] - 1s 224ms/step - loss: 3369.7155 - accuracy: 0.0000e+00 - val_loss: 408.4221 - val_accuracy: 0.0000e+00\n",
            "Epoch 293/500\n",
            "6/6 [==============================] - 1s 224ms/step - loss: 2956.0001 - accuracy: 0.0000e+00 - val_loss: 342.1664 - val_accuracy: 0.0000e+00\n",
            "Epoch 294/500\n",
            "6/6 [==============================] - 1s 235ms/step - loss: 3343.3059 - accuracy: 0.0000e+00 - val_loss: 1117.2034 - val_accuracy: 0.0000e+00\n",
            "Epoch 295/500\n",
            "6/6 [==============================] - 1s 227ms/step - loss: 3259.3702 - accuracy: 0.0000e+00 - val_loss: 601.0651 - val_accuracy: 0.0000e+00\n",
            "Epoch 296/500\n",
            "6/6 [==============================] - 1s 227ms/step - loss: 3127.4924 - accuracy: 0.0000e+00 - val_loss: 402.4203 - val_accuracy: 0.0000e+00\n",
            "Epoch 297/500\n",
            "6/6 [==============================] - 1s 229ms/step - loss: 3283.4780 - accuracy: 0.0000e+00 - val_loss: 729.9104 - val_accuracy: 0.0000e+00\n",
            "Epoch 298/500\n",
            "6/6 [==============================] - 1s 228ms/step - loss: 3158.6884 - accuracy: 0.0000e+00 - val_loss: 468.9414 - val_accuracy: 0.0000e+00\n",
            "Epoch 299/500\n",
            "6/6 [==============================] - 1s 225ms/step - loss: 2828.8326 - accuracy: 0.0000e+00 - val_loss: 428.3148 - val_accuracy: 0.0000e+00\n",
            "Epoch 300/500\n",
            "6/6 [==============================] - 1s 226ms/step - loss: 2975.8965 - accuracy: 0.0000e+00 - val_loss: 396.1337 - val_accuracy: 0.0000e+00\n",
            "Epoch 301/500\n",
            "6/6 [==============================] - 1s 228ms/step - loss: 2816.2031 - accuracy: 0.0000e+00 - val_loss: 517.3051 - val_accuracy: 0.0000e+00\n",
            "Epoch 302/500\n",
            "6/6 [==============================] - 1s 229ms/step - loss: 2806.9758 - accuracy: 0.0000e+00 - val_loss: 438.0930 - val_accuracy: 0.0000e+00\n",
            "Epoch 303/500\n",
            "6/6 [==============================] - 1s 225ms/step - loss: 3315.2690 - accuracy: 0.0000e+00 - val_loss: 336.3828 - val_accuracy: 0.0000e+00\n",
            "Epoch 304/500\n",
            "6/6 [==============================] - 1s 228ms/step - loss: 3223.0243 - accuracy: 0.0000e+00 - val_loss: 374.8068 - val_accuracy: 0.0000e+00\n",
            "Epoch 305/500\n",
            "6/6 [==============================] - 1s 234ms/step - loss: 2780.8725 - accuracy: 0.0000e+00 - val_loss: 556.0217 - val_accuracy: 0.0000e+00\n",
            "Epoch 306/500\n",
            "6/6 [==============================] - 1s 227ms/step - loss: 3132.8736 - accuracy: 0.0000e+00 - val_loss: 812.1393 - val_accuracy: 0.0000e+00\n",
            "Epoch 307/500\n",
            "6/6 [==============================] - 1s 229ms/step - loss: 2823.8334 - accuracy: 0.0000e+00 - val_loss: 452.2551 - val_accuracy: 0.0000e+00\n",
            "Epoch 308/500\n",
            "6/6 [==============================] - 1s 225ms/step - loss: 3021.9640 - accuracy: 0.0000e+00 - val_loss: 780.2990 - val_accuracy: 0.0000e+00\n",
            "Epoch 309/500\n",
            "6/6 [==============================] - 1s 223ms/step - loss: 2656.1679 - accuracy: 0.0000e+00 - val_loss: 634.0396 - val_accuracy: 0.0000e+00\n",
            "Epoch 310/500\n",
            "6/6 [==============================] - 1s 230ms/step - loss: 3042.9343 - accuracy: 0.0000e+00 - val_loss: 609.4506 - val_accuracy: 0.0000e+00\n",
            "Epoch 311/500\n",
            "6/6 [==============================] - 1s 229ms/step - loss: 2464.7205 - accuracy: 0.0000e+00 - val_loss: 422.7556 - val_accuracy: 0.0000e+00\n",
            "Epoch 312/500\n",
            "6/6 [==============================] - 1s 231ms/step - loss: 2686.5104 - accuracy: 0.0000e+00 - val_loss: 480.2957 - val_accuracy: 0.0000e+00\n",
            "Epoch 313/500\n",
            "6/6 [==============================] - 1s 228ms/step - loss: 2911.8265 - accuracy: 0.0000e+00 - val_loss: 1037.8264 - val_accuracy: 0.0000e+00\n",
            "Epoch 314/500\n",
            "6/6 [==============================] - 1s 226ms/step - loss: 2876.8464 - accuracy: 0.0000e+00 - val_loss: 532.5757 - val_accuracy: 0.0000e+00\n",
            "Epoch 315/500\n",
            "6/6 [==============================] - 1s 234ms/step - loss: 2594.4313 - accuracy: 0.0000e+00 - val_loss: 696.8532 - val_accuracy: 0.0000e+00\n",
            "Epoch 316/500\n",
            "6/6 [==============================] - 1s 229ms/step - loss: 3081.8755 - accuracy: 0.0000e+00 - val_loss: 505.8200 - val_accuracy: 0.0000e+00\n",
            "Epoch 317/500\n",
            "6/6 [==============================] - 1s 234ms/step - loss: 2743.3241 - accuracy: 0.0000e+00 - val_loss: 461.4684 - val_accuracy: 0.0000e+00\n",
            "Epoch 318/500\n",
            "6/6 [==============================] - 1s 235ms/step - loss: 2645.9863 - accuracy: 0.0000e+00 - val_loss: 441.5344 - val_accuracy: 0.0000e+00\n",
            "Epoch 319/500\n",
            "6/6 [==============================] - 1s 226ms/step - loss: 2964.0677 - accuracy: 0.0000e+00 - val_loss: 432.4494 - val_accuracy: 0.0000e+00\n",
            "Epoch 320/500\n",
            "6/6 [==============================] - 1s 236ms/step - loss: 2539.7510 - accuracy: 0.0000e+00 - val_loss: 805.0873 - val_accuracy: 0.0000e+00\n",
            "Epoch 321/500\n",
            "6/6 [==============================] - 1s 231ms/step - loss: 2682.7332 - accuracy: 0.0000e+00 - val_loss: 411.7834 - val_accuracy: 0.0000e+00\n",
            "Epoch 322/500\n",
            "6/6 [==============================] - 1s 228ms/step - loss: 2718.6951 - accuracy: 0.0000e+00 - val_loss: 453.2186 - val_accuracy: 0.0000e+00\n",
            "Epoch 323/500\n",
            "6/6 [==============================] - 1s 226ms/step - loss: 2484.7554 - accuracy: 0.0000e+00 - val_loss: 523.8233 - val_accuracy: 0.0000e+00\n",
            "Epoch 324/500\n",
            "6/6 [==============================] - 1s 227ms/step - loss: 2441.9841 - accuracy: 0.0000e+00 - val_loss: 455.7453 - val_accuracy: 0.0000e+00\n",
            "Epoch 325/500\n",
            "6/6 [==============================] - 1s 229ms/step - loss: 2640.1006 - accuracy: 0.0000e+00 - val_loss: 433.7341 - val_accuracy: 0.0000e+00\n",
            "Epoch 326/500\n",
            "6/6 [==============================] - 1s 224ms/step - loss: 2838.0427 - accuracy: 0.0000e+00 - val_loss: 503.8053 - val_accuracy: 0.0000e+00\n",
            "Epoch 327/500\n",
            "6/6 [==============================] - 1s 235ms/step - loss: 3081.9003 - accuracy: 0.0000e+00 - val_loss: 427.4711 - val_accuracy: 0.0000e+00\n",
            "Epoch 328/500\n",
            "6/6 [==============================] - 1s 230ms/step - loss: 2753.1222 - accuracy: 0.0000e+00 - val_loss: 550.0423 - val_accuracy: 0.0000e+00\n",
            "Epoch 329/500\n",
            "6/6 [==============================] - 1s 229ms/step - loss: 2282.6870 - accuracy: 0.0000e+00 - val_loss: 440.9148 - val_accuracy: 0.0000e+00\n",
            "Epoch 330/500\n",
            "6/6 [==============================] - 1s 234ms/step - loss: 2866.7475 - accuracy: 0.0000e+00 - val_loss: 409.3414 - val_accuracy: 0.0000e+00\n",
            "Epoch 331/500\n",
            "6/6 [==============================] - 1s 229ms/step - loss: 2741.4254 - accuracy: 0.0000e+00 - val_loss: 666.1173 - val_accuracy: 0.0000e+00\n",
            "Epoch 332/500\n",
            "6/6 [==============================] - 1s 227ms/step - loss: 2631.4679 - accuracy: 0.0000e+00 - val_loss: 510.3572 - val_accuracy: 0.0000e+00\n",
            "Epoch 333/500\n",
            "6/6 [==============================] - 1s 226ms/step - loss: 2743.4017 - accuracy: 0.0000e+00 - val_loss: 422.4136 - val_accuracy: 0.0000e+00\n",
            "Epoch 334/500\n",
            "6/6 [==============================] - 1s 228ms/step - loss: 2377.1258 - accuracy: 0.0000e+00 - val_loss: 851.9132 - val_accuracy: 0.0000e+00\n",
            "Epoch 335/500\n",
            "6/6 [==============================] - 1s 231ms/step - loss: 2708.1114 - accuracy: 0.0000e+00 - val_loss: 445.5827 - val_accuracy: 0.0000e+00\n",
            "Epoch 336/500\n",
            "6/6 [==============================] - 1s 229ms/step - loss: 2992.3133 - accuracy: 0.0000e+00 - val_loss: 646.0416 - val_accuracy: 0.0000e+00\n",
            "Epoch 337/500\n",
            "6/6 [==============================] - 1s 231ms/step - loss: 2569.6676 - accuracy: 0.0000e+00 - val_loss: 457.7948 - val_accuracy: 0.0000e+00\n",
            "Epoch 338/500\n",
            "6/6 [==============================] - 1s 232ms/step - loss: 2703.9654 - accuracy: 0.0000e+00 - val_loss: 526.9543 - val_accuracy: 0.0000e+00\n",
            "Epoch 339/500\n",
            "6/6 [==============================] - 1s 223ms/step - loss: 2667.3309 - accuracy: 0.0000e+00 - val_loss: 974.7581 - val_accuracy: 0.0000e+00\n",
            "Epoch 340/500\n",
            "6/6 [==============================] - 1s 229ms/step - loss: 2563.7546 - accuracy: 0.0000e+00 - val_loss: 761.8499 - val_accuracy: 0.0000e+00\n",
            "Epoch 341/500\n",
            "6/6 [==============================] - 1s 227ms/step - loss: 2875.2030 - accuracy: 0.0000e+00 - val_loss: 522.6664 - val_accuracy: 0.0000e+00\n",
            "Epoch 342/500\n",
            "6/6 [==============================] - 1s 229ms/step - loss: 2796.9094 - accuracy: 0.0000e+00 - val_loss: 516.9910 - val_accuracy: 0.0000e+00\n",
            "Epoch 343/500\n",
            "6/6 [==============================] - 1s 235ms/step - loss: 3012.9316 - accuracy: 0.0000e+00 - val_loss: 1027.2050 - val_accuracy: 0.0000e+00\n",
            "Epoch 344/500\n",
            "6/6 [==============================] - 1s 235ms/step - loss: 2282.0067 - accuracy: 0.0000e+00 - val_loss: 479.8338 - val_accuracy: 0.0000e+00\n",
            "Epoch 345/500\n",
            "6/6 [==============================] - 1s 232ms/step - loss: 2636.4730 - accuracy: 0.0000e+00 - val_loss: 456.9305 - val_accuracy: 0.0000e+00\n",
            "Epoch 346/500\n",
            "6/6 [==============================] - 1s 231ms/step - loss: 2815.0446 - accuracy: 0.0000e+00 - val_loss: 460.8952 - val_accuracy: 0.0000e+00\n",
            "Epoch 347/500\n",
            "6/6 [==============================] - 1s 225ms/step - loss: 2339.7958 - accuracy: 0.0000e+00 - val_loss: 431.1333 - val_accuracy: 0.0000e+00\n",
            "Epoch 348/500\n",
            "6/6 [==============================] - 1s 227ms/step - loss: 2512.4435 - accuracy: 0.0000e+00 - val_loss: 836.5862 - val_accuracy: 0.0000e+00\n",
            "Epoch 349/500\n",
            "6/6 [==============================] - 1s 232ms/step - loss: 2479.9514 - accuracy: 0.0000e+00 - val_loss: 810.7624 - val_accuracy: 0.0000e+00\n",
            "Epoch 350/500\n",
            "6/6 [==============================] - 1s 234ms/step - loss: 2175.5225 - accuracy: 0.0000e+00 - val_loss: 479.4955 - val_accuracy: 0.0000e+00\n",
            "Epoch 351/500\n",
            "6/6 [==============================] - 1s 229ms/step - loss: 2337.1644 - accuracy: 0.0000e+00 - val_loss: 413.8300 - val_accuracy: 0.0000e+00\n",
            "Epoch 352/500\n",
            "6/6 [==============================] - 1s 232ms/step - loss: 2621.8687 - accuracy: 0.0000e+00 - val_loss: 525.7994 - val_accuracy: 0.0000e+00\n",
            "Epoch 353/500\n",
            "6/6 [==============================] - 1s 237ms/step - loss: 2579.5352 - accuracy: 0.0000e+00 - val_loss: 524.6386 - val_accuracy: 0.0000e+00\n",
            "Epoch 354/500\n",
            "6/6 [==============================] - 1s 226ms/step - loss: 2801.9533 - accuracy: 0.0000e+00 - val_loss: 377.7067 - val_accuracy: 0.0000e+00\n",
            "Epoch 355/500\n",
            "6/6 [==============================] - 1s 226ms/step - loss: 2410.6507 - accuracy: 0.0000e+00 - val_loss: 747.2703 - val_accuracy: 0.0000e+00\n",
            "Epoch 356/500\n",
            "6/6 [==============================] - 1s 223ms/step - loss: 2485.2149 - accuracy: 0.0000e+00 - val_loss: 507.5205 - val_accuracy: 0.0000e+00\n",
            "Epoch 357/500\n",
            "6/6 [==============================] - 1s 229ms/step - loss: 2736.5734 - accuracy: 0.0000e+00 - val_loss: 546.5466 - val_accuracy: 0.0000e+00\n",
            "Epoch 358/500\n",
            "6/6 [==============================] - 1s 234ms/step - loss: 2680.1251 - accuracy: 0.0000e+00 - val_loss: 411.4074 - val_accuracy: 0.0000e+00\n",
            "Epoch 359/500\n",
            "6/6 [==============================] - 1s 236ms/step - loss: 2395.6002 - accuracy: 0.0000e+00 - val_loss: 454.7344 - val_accuracy: 0.0000e+00\n",
            "Epoch 360/500\n",
            "6/6 [==============================] - 1s 239ms/step - loss: 2159.6763 - accuracy: 0.0000e+00 - val_loss: 369.1466 - val_accuracy: 0.0000e+00\n",
            "Epoch 361/500\n",
            "6/6 [==============================] - 1s 233ms/step - loss: 2401.9487 - accuracy: 0.0000e+00 - val_loss: 619.6403 - val_accuracy: 0.0000e+00\n",
            "Epoch 362/500\n",
            "6/6 [==============================] - 1s 227ms/step - loss: 2041.1942 - accuracy: 0.0000e+00 - val_loss: 499.9181 - val_accuracy: 0.0000e+00\n",
            "Epoch 363/500\n",
            "6/6 [==============================] - 1s 224ms/step - loss: 2651.8494 - accuracy: 0.0000e+00 - val_loss: 620.2776 - val_accuracy: 0.0000e+00\n",
            "Epoch 364/500\n",
            "6/6 [==============================] - 1s 230ms/step - loss: 2224.5173 - accuracy: 0.0000e+00 - val_loss: 426.1682 - val_accuracy: 0.0000e+00\n",
            "Epoch 365/500\n",
            "6/6 [==============================] - 1s 243ms/step - loss: 2027.3524 - accuracy: 0.0000e+00 - val_loss: 433.7563 - val_accuracy: 0.0000e+00\n",
            "Epoch 366/500\n",
            "6/6 [==============================] - 1s 229ms/step - loss: 1927.1458 - accuracy: 0.0000e+00 - val_loss: 405.6539 - val_accuracy: 0.0000e+00\n",
            "Epoch 367/500\n",
            "6/6 [==============================] - 1s 226ms/step - loss: 2347.3578 - accuracy: 0.0000e+00 - val_loss: 847.1462 - val_accuracy: 0.0000e+00\n",
            "Epoch 368/500\n",
            "6/6 [==============================] - 1s 226ms/step - loss: 2745.3534 - accuracy: 0.0000e+00 - val_loss: 450.1620 - val_accuracy: 0.0000e+00\n",
            "Epoch 369/500\n",
            "6/6 [==============================] - 1s 229ms/step - loss: 2296.0979 - accuracy: 0.0000e+00 - val_loss: 450.3961 - val_accuracy: 0.0000e+00\n",
            "Epoch 370/500\n",
            "6/6 [==============================] - 1s 232ms/step - loss: 2569.6800 - accuracy: 0.0000e+00 - val_loss: 374.9342 - val_accuracy: 0.0000e+00\n",
            "Epoch 371/500\n",
            "6/6 [==============================] - 1s 228ms/step - loss: 2149.2832 - accuracy: 0.0000e+00 - val_loss: 725.8804 - val_accuracy: 0.0000e+00\n",
            "Epoch 372/500\n",
            "6/6 [==============================] - 1s 233ms/step - loss: 2871.5919 - accuracy: 0.0000e+00 - val_loss: 417.0522 - val_accuracy: 0.0000e+00\n",
            "Epoch 373/500\n",
            "6/6 [==============================] - 1s 231ms/step - loss: 2349.7672 - accuracy: 0.0000e+00 - val_loss: 553.5807 - val_accuracy: 0.0000e+00\n",
            "Epoch 374/500\n",
            "6/6 [==============================] - 1s 228ms/step - loss: 2689.8059 - accuracy: 0.0000e+00 - val_loss: 560.2536 - val_accuracy: 0.0000e+00\n",
            "Epoch 375/500\n",
            "6/6 [==============================] - 1s 227ms/step - loss: 2756.9747 - accuracy: 0.0000e+00 - val_loss: 716.0948 - val_accuracy: 0.0000e+00\n",
            "Epoch 376/500\n",
            "6/6 [==============================] - 1s 232ms/step - loss: 2523.8463 - accuracy: 0.0000e+00 - val_loss: 618.8628 - val_accuracy: 0.0000e+00\n",
            "Epoch 377/500\n",
            "6/6 [==============================] - 1s 231ms/step - loss: 2473.0864 - accuracy: 0.0000e+00 - val_loss: 396.1880 - val_accuracy: 0.0000e+00\n",
            "Epoch 378/500\n",
            "6/6 [==============================] - 1s 225ms/step - loss: 2777.9593 - accuracy: 0.0000e+00 - val_loss: 562.4974 - val_accuracy: 0.0000e+00\n",
            "Epoch 379/500\n",
            "6/6 [==============================] - 1s 228ms/step - loss: 2348.1251 - accuracy: 0.0000e+00 - val_loss: 471.8904 - val_accuracy: 0.0000e+00\n",
            "Epoch 380/500\n",
            "6/6 [==============================] - 1s 237ms/step - loss: 2135.7236 - accuracy: 0.0000e+00 - val_loss: 472.0013 - val_accuracy: 0.0000e+00\n",
            "Epoch 381/500\n",
            "6/6 [==============================] - 1s 228ms/step - loss: 2880.8821 - accuracy: 0.0000e+00 - val_loss: 507.4461 - val_accuracy: 0.0000e+00\n",
            "Epoch 382/500\n",
            "6/6 [==============================] - 1s 233ms/step - loss: 2687.3167 - accuracy: 0.0000e+00 - val_loss: 905.1858 - val_accuracy: 0.0000e+00\n",
            "Epoch 383/500\n",
            "6/6 [==============================] - 1s 231ms/step - loss: 2486.6465 - accuracy: 0.0000e+00 - val_loss: 946.8932 - val_accuracy: 0.0000e+00\n",
            "Epoch 384/500\n",
            "6/6 [==============================] - 1s 227ms/step - loss: 2641.4651 - accuracy: 0.0000e+00 - val_loss: 1925.3225 - val_accuracy: 0.0000e+00\n",
            "Epoch 385/500\n",
            "6/6 [==============================] - 1s 227ms/step - loss: 2538.2203 - accuracy: 0.0000e+00 - val_loss: 441.5129 - val_accuracy: 0.0000e+00\n",
            "Epoch 386/500\n",
            "6/6 [==============================] - 1s 231ms/step - loss: 2153.2267 - accuracy: 0.0000e+00 - val_loss: 970.8076 - val_accuracy: 0.0000e+00\n",
            "Epoch 387/500\n",
            "6/6 [==============================] - 1s 236ms/step - loss: 2189.7151 - accuracy: 0.0000e+00 - val_loss: 609.8182 - val_accuracy: 0.0000e+00\n",
            "Epoch 388/500\n",
            "6/6 [==============================] - 1s 228ms/step - loss: 2231.5083 - accuracy: 0.0000e+00 - val_loss: 1141.4458 - val_accuracy: 0.0000e+00\n",
            "Epoch 389/500\n",
            "6/6 [==============================] - 1s 232ms/step - loss: 2309.5821 - accuracy: 0.0000e+00 - val_loss: 578.6941 - val_accuracy: 0.0000e+00\n",
            "Epoch 390/500\n",
            "6/6 [==============================] - 1s 226ms/step - loss: 2284.3532 - accuracy: 0.0000e+00 - val_loss: 325.4941 - val_accuracy: 0.0000e+00\n",
            "Epoch 391/500\n",
            "6/6 [==============================] - 1s 224ms/step - loss: 2250.3153 - accuracy: 0.0000e+00 - val_loss: 429.0763 - val_accuracy: 0.0000e+00\n",
            "Epoch 392/500\n",
            "6/6 [==============================] - 1s 228ms/step - loss: 2259.1966 - accuracy: 0.0000e+00 - val_loss: 596.0722 - val_accuracy: 0.0000e+00\n",
            "Epoch 393/500\n",
            "6/6 [==============================] - 1s 229ms/step - loss: 2810.7793 - accuracy: 0.0000e+00 - val_loss: 338.0361 - val_accuracy: 0.0000e+00\n",
            "Epoch 394/500\n",
            "6/6 [==============================] - 1s 228ms/step - loss: 2366.8832 - accuracy: 0.0000e+00 - val_loss: 838.0027 - val_accuracy: 0.0000e+00\n",
            "Epoch 395/500\n",
            "6/6 [==============================] - 1s 229ms/step - loss: 2495.0236 - accuracy: 0.0000e+00 - val_loss: 907.5070 - val_accuracy: 0.0000e+00\n",
            "Epoch 396/500\n",
            "6/6 [==============================] - 1s 236ms/step - loss: 2145.8279 - accuracy: 0.0000e+00 - val_loss: 690.8291 - val_accuracy: 0.0000e+00\n",
            "Epoch 397/500\n",
            "6/6 [==============================] - 1s 229ms/step - loss: 2312.7232 - accuracy: 0.0000e+00 - val_loss: 369.7819 - val_accuracy: 0.0000e+00\n",
            "Epoch 398/500\n",
            "6/6 [==============================] - 1s 228ms/step - loss: 2969.9517 - accuracy: 0.0000e+00 - val_loss: 393.4094 - val_accuracy: 0.0000e+00\n",
            "Epoch 399/500\n",
            "6/6 [==============================] - 1s 227ms/step - loss: 2373.9731 - accuracy: 0.0000e+00 - val_loss: 397.5152 - val_accuracy: 0.0000e+00\n",
            "Epoch 400/500\n",
            "6/6 [==============================] - 1s 223ms/step - loss: 2687.7033 - accuracy: 0.0000e+00 - val_loss: 410.1265 - val_accuracy: 0.0000e+00\n",
            "Epoch 401/500\n",
            "6/6 [==============================] - 1s 237ms/step - loss: 2339.8292 - accuracy: 0.0000e+00 - val_loss: 848.0356 - val_accuracy: 0.0000e+00\n",
            "Epoch 402/500\n",
            "6/6 [==============================] - 1s 234ms/step - loss: 2586.6672 - accuracy: 0.0000e+00 - val_loss: 662.8201 - val_accuracy: 0.0000e+00\n",
            "Epoch 403/500\n",
            "6/6 [==============================] - 1s 230ms/step - loss: 2318.8710 - accuracy: 0.0000e+00 - val_loss: 445.6903 - val_accuracy: 0.0000e+00\n",
            "Epoch 404/500\n",
            "6/6 [==============================] - 1s 229ms/step - loss: 2441.0343 - accuracy: 0.0000e+00 - val_loss: 475.7775 - val_accuracy: 0.0000e+00\n",
            "Epoch 405/500\n",
            "6/6 [==============================] - 1s 229ms/step - loss: 2098.3387 - accuracy: 0.0000e+00 - val_loss: 1085.7791 - val_accuracy: 0.0000e+00\n",
            "Epoch 406/500\n",
            "6/6 [==============================] - 1s 233ms/step - loss: 2612.9753 - accuracy: 0.0000e+00 - val_loss: 401.8379 - val_accuracy: 0.0000e+00\n",
            "Epoch 407/500\n",
            "6/6 [==============================] - 1s 228ms/step - loss: 2702.3499 - accuracy: 0.0000e+00 - val_loss: 873.7313 - val_accuracy: 0.0000e+00\n",
            "Epoch 408/500\n",
            "6/6 [==============================] - 1s 223ms/step - loss: 2957.8542 - accuracy: 0.0000e+00 - val_loss: 476.6287 - val_accuracy: 0.0000e+00\n",
            "Epoch 409/500\n",
            "6/6 [==============================] - 1s 230ms/step - loss: 2613.2984 - accuracy: 0.0000e+00 - val_loss: 1120.4849 - val_accuracy: 0.0000e+00\n",
            "Epoch 410/500\n",
            "6/6 [==============================] - 1s 231ms/step - loss: 2423.4340 - accuracy: 0.0000e+00 - val_loss: 406.7806 - val_accuracy: 0.0000e+00\n",
            "Epoch 411/500\n",
            "6/6 [==============================] - 1s 240ms/step - loss: 2216.1341 - accuracy: 0.0000e+00 - val_loss: 643.8947 - val_accuracy: 0.0000e+00\n",
            "Epoch 412/500\n",
            "6/6 [==============================] - 1s 233ms/step - loss: 2554.6545 - accuracy: 0.0000e+00 - val_loss: 503.3890 - val_accuracy: 0.0000e+00\n",
            "Epoch 413/500\n",
            "6/6 [==============================] - 1s 228ms/step - loss: 2097.0981 - accuracy: 0.0000e+00 - val_loss: 453.9608 - val_accuracy: 0.0000e+00\n",
            "Epoch 414/500\n",
            "6/6 [==============================] - 1s 239ms/step - loss: 2348.8463 - accuracy: 0.0000e+00 - val_loss: 732.2697 - val_accuracy: 0.0000e+00\n",
            "Epoch 415/500\n",
            "6/6 [==============================] - 2s 248ms/step - loss: 2327.7032 - accuracy: 0.0000e+00 - val_loss: 627.4280 - val_accuracy: 0.0000e+00\n",
            "Epoch 416/500\n",
            "6/6 [==============================] - 1s 241ms/step - loss: 2016.9698 - accuracy: 0.0000e+00 - val_loss: 581.8936 - val_accuracy: 0.0000e+00\n",
            "Epoch 417/500\n",
            "6/6 [==============================] - 1s 232ms/step - loss: 2207.9983 - accuracy: 0.0000e+00 - val_loss: 592.1750 - val_accuracy: 0.0000e+00\n",
            "Epoch 418/500\n",
            "6/6 [==============================] - 1s 225ms/step - loss: 2212.0943 - accuracy: 0.0000e+00 - val_loss: 514.3666 - val_accuracy: 0.0000e+00\n",
            "Epoch 419/500\n",
            "6/6 [==============================] - 1s 236ms/step - loss: 2485.2968 - accuracy: 0.0000e+00 - val_loss: 793.4091 - val_accuracy: 0.0000e+00\n",
            "Epoch 420/500\n",
            "6/6 [==============================] - 1s 229ms/step - loss: 2974.2509 - accuracy: 0.0000e+00 - val_loss: 517.2164 - val_accuracy: 0.0000e+00\n",
            "Epoch 421/500\n",
            "6/6 [==============================] - 1s 230ms/step - loss: 2445.3559 - accuracy: 0.0000e+00 - val_loss: 929.1991 - val_accuracy: 0.0000e+00\n",
            "Epoch 422/500\n",
            "6/6 [==============================] - 1s 237ms/step - loss: 2427.3272 - accuracy: 0.0000e+00 - val_loss: 480.6253 - val_accuracy: 0.0000e+00\n",
            "Epoch 423/500\n",
            "6/6 [==============================] - 1s 243ms/step - loss: 2656.0168 - accuracy: 0.0000e+00 - val_loss: 756.9102 - val_accuracy: 0.0000e+00\n",
            "Epoch 424/500\n",
            "6/6 [==============================] - 1s 231ms/step - loss: 2445.4014 - accuracy: 0.0000e+00 - val_loss: 462.7321 - val_accuracy: 0.0000e+00\n",
            "Epoch 425/500\n",
            "6/6 [==============================] - 1s 232ms/step - loss: 2466.6106 - accuracy: 0.0000e+00 - val_loss: 506.1932 - val_accuracy: 0.0000e+00\n",
            "Epoch 426/500\n",
            "6/6 [==============================] - 1s 229ms/step - loss: 2136.1907 - accuracy: 0.0000e+00 - val_loss: 656.8206 - val_accuracy: 0.0000e+00\n",
            "Epoch 427/500\n",
            "6/6 [==============================] - 1s 235ms/step - loss: 2219.8492 - accuracy: 0.0000e+00 - val_loss: 628.3868 - val_accuracy: 0.0000e+00\n",
            "Epoch 428/500\n",
            "6/6 [==============================] - 1s 242ms/step - loss: 2503.1591 - accuracy: 0.0000e+00 - val_loss: 883.6487 - val_accuracy: 0.0000e+00\n",
            "Epoch 429/500\n",
            "6/6 [==============================] - 1s 235ms/step - loss: 2290.5287 - accuracy: 0.0000e+00 - val_loss: 696.9395 - val_accuracy: 0.0000e+00\n",
            "Epoch 430/500\n",
            "6/6 [==============================] - 1s 231ms/step - loss: 1896.6495 - accuracy: 0.0000e+00 - val_loss: 439.3072 - val_accuracy: 0.0000e+00\n",
            "Epoch 431/500\n",
            "6/6 [==============================] - 1s 230ms/step - loss: 2144.0268 - accuracy: 0.0000e+00 - val_loss: 389.4273 - val_accuracy: 0.0000e+00\n",
            "Epoch 432/500\n",
            "6/6 [==============================] - 1s 240ms/step - loss: 2373.8639 - accuracy: 0.0000e+00 - val_loss: 521.3536 - val_accuracy: 0.0000e+00\n",
            "Epoch 433/500\n",
            "6/6 [==============================] - 1s 230ms/step - loss: 2212.6689 - accuracy: 0.0000e+00 - val_loss: 432.7205 - val_accuracy: 0.0000e+00\n",
            "Epoch 434/500\n",
            "6/6 [==============================] - 1s 234ms/step - loss: 2511.6777 - accuracy: 0.0000e+00 - val_loss: 378.0900 - val_accuracy: 0.0000e+00\n",
            "Epoch 435/500\n",
            "6/6 [==============================] - 1s 233ms/step - loss: 2008.5855 - accuracy: 0.0000e+00 - val_loss: 484.2892 - val_accuracy: 0.0000e+00\n",
            "Epoch 436/500\n",
            "6/6 [==============================] - 1s 232ms/step - loss: 2150.4395 - accuracy: 0.0000e+00 - val_loss: 387.9603 - val_accuracy: 0.0000e+00\n",
            "Epoch 437/500\n",
            "6/6 [==============================] - 1s 230ms/step - loss: 2023.9859 - accuracy: 0.0000e+00 - val_loss: 410.6293 - val_accuracy: 0.0000e+00\n",
            "Epoch 438/500\n",
            "6/6 [==============================] - 1s 228ms/step - loss: 2219.9473 - accuracy: 0.0000e+00 - val_loss: 397.4394 - val_accuracy: 0.0000e+00\n",
            "Epoch 439/500\n",
            "6/6 [==============================] - 1s 233ms/step - loss: 2203.4975 - accuracy: 0.0000e+00 - val_loss: 478.4989 - val_accuracy: 0.0000e+00\n",
            "Epoch 440/500\n",
            "6/6 [==============================] - 1s 233ms/step - loss: 2525.1994 - accuracy: 0.0000e+00 - val_loss: 336.1886 - val_accuracy: 0.0000e+00\n",
            "Epoch 441/500\n",
            "6/6 [==============================] - 1s 228ms/step - loss: 2103.6120 - accuracy: 0.0000e+00 - val_loss: 652.0588 - val_accuracy: 0.0000e+00\n",
            "Epoch 442/500\n",
            "6/6 [==============================] - 1s 231ms/step - loss: 2236.4404 - accuracy: 0.0000e+00 - val_loss: 774.5872 - val_accuracy: 0.0000e+00\n",
            "Epoch 443/500\n",
            "6/6 [==============================] - 1s 231ms/step - loss: 2089.5368 - accuracy: 0.0000e+00 - val_loss: 721.2847 - val_accuracy: 0.0000e+00\n",
            "Epoch 444/500\n",
            "6/6 [==============================] - 1s 231ms/step - loss: 2040.7775 - accuracy: 0.0000e+00 - val_loss: 464.1169 - val_accuracy: 0.0000e+00\n",
            "Epoch 445/500\n",
            "6/6 [==============================] - 1s 239ms/step - loss: 2331.8812 - accuracy: 0.0000e+00 - val_loss: 462.7114 - val_accuracy: 0.0000e+00\n",
            "Epoch 446/500\n",
            "6/6 [==============================] - 1s 237ms/step - loss: 2282.9502 - accuracy: 0.0000e+00 - val_loss: 1289.0826 - val_accuracy: 0.0000e+00\n",
            "Epoch 447/500\n",
            "6/6 [==============================] - 1s 228ms/step - loss: 2250.6009 - accuracy: 0.0000e+00 - val_loss: 421.9181 - val_accuracy: 0.0000e+00\n",
            "Epoch 448/500\n",
            "6/6 [==============================] - 1s 229ms/step - loss: 2502.2438 - accuracy: 0.0000e+00 - val_loss: 407.4445 - val_accuracy: 0.0000e+00\n",
            "Epoch 449/500\n",
            "6/6 [==============================] - 1s 231ms/step - loss: 2302.5970 - accuracy: 0.0000e+00 - val_loss: 361.9649 - val_accuracy: 0.0000e+00\n",
            "Epoch 450/500\n",
            "6/6 [==============================] - 1s 227ms/step - loss: 2058.8196 - accuracy: 0.0000e+00 - val_loss: 554.8062 - val_accuracy: 0.0000e+00\n",
            "Epoch 451/500\n",
            "6/6 [==============================] - 1s 227ms/step - loss: 1952.9738 - accuracy: 0.0000e+00 - val_loss: 328.7555 - val_accuracy: 0.0000e+00\n",
            "Epoch 452/500\n",
            "6/6 [==============================] - 1s 228ms/step - loss: 1932.8447 - accuracy: 0.0000e+00 - val_loss: 385.2332 - val_accuracy: 0.0000e+00\n",
            "Epoch 453/500\n",
            "6/6 [==============================] - 1s 225ms/step - loss: 2137.3360 - accuracy: 0.0000e+00 - val_loss: 418.3304 - val_accuracy: 0.0000e+00\n",
            "Epoch 454/500\n",
            "6/6 [==============================] - 1s 235ms/step - loss: 2485.8892 - accuracy: 0.0000e+00 - val_loss: 403.9780 - val_accuracy: 0.0000e+00\n",
            "Epoch 455/500\n",
            "6/6 [==============================] - 1s 230ms/step - loss: 2173.5717 - accuracy: 0.0000e+00 - val_loss: 927.5627 - val_accuracy: 0.0000e+00\n",
            "Epoch 456/500\n",
            "6/6 [==============================] - 1s 236ms/step - loss: 2549.3766 - accuracy: 0.0000e+00 - val_loss: 369.5419 - val_accuracy: 0.0000e+00\n",
            "Epoch 457/500\n",
            "6/6 [==============================] - 1s 238ms/step - loss: 2112.8973 - accuracy: 0.0000e+00 - val_loss: 489.2625 - val_accuracy: 0.0000e+00\n",
            "Epoch 458/500\n",
            "6/6 [==============================] - 1s 236ms/step - loss: 2118.4793 - accuracy: 0.0000e+00 - val_loss: 328.0492 - val_accuracy: 0.0000e+00\n",
            "Epoch 459/500\n",
            "6/6 [==============================] - 1s 233ms/step - loss: 2137.1080 - accuracy: 0.0000e+00 - val_loss: 373.5937 - val_accuracy: 0.0000e+00\n",
            "Epoch 460/500\n",
            "6/6 [==============================] - 1s 226ms/step - loss: 2169.1777 - accuracy: 0.0000e+00 - val_loss: 358.3157 - val_accuracy: 0.0000e+00\n",
            "Epoch 461/500\n",
            "6/6 [==============================] - 1s 237ms/step - loss: 2081.2755 - accuracy: 0.0000e+00 - val_loss: 320.2982 - val_accuracy: 0.0000e+00\n",
            "Epoch 462/500\n",
            "6/6 [==============================] - 1s 230ms/step - loss: 2081.9651 - accuracy: 0.0000e+00 - val_loss: 604.4894 - val_accuracy: 0.0000e+00\n",
            "Epoch 463/500\n",
            "6/6 [==============================] - 1s 238ms/step - loss: 2110.5946 - accuracy: 0.0000e+00 - val_loss: 432.6742 - val_accuracy: 0.0000e+00\n",
            "Epoch 464/500\n",
            "6/6 [==============================] - 1s 225ms/step - loss: 2025.8665 - accuracy: 0.0000e+00 - val_loss: 561.5609 - val_accuracy: 0.0000e+00\n",
            "Epoch 465/500\n",
            "6/6 [==============================] - 1s 224ms/step - loss: 2080.7113 - accuracy: 0.0000e+00 - val_loss: 361.4308 - val_accuracy: 0.0000e+00\n",
            "Epoch 466/500\n",
            "6/6 [==============================] - 1s 222ms/step - loss: 2238.9318 - accuracy: 0.0000e+00 - val_loss: 479.6976 - val_accuracy: 0.0000e+00\n",
            "Epoch 467/500\n",
            "6/6 [==============================] - 1s 232ms/step - loss: 2108.2786 - accuracy: 0.0000e+00 - val_loss: 372.4671 - val_accuracy: 0.0000e+00\n",
            "Epoch 468/500\n",
            "6/6 [==============================] - 1s 228ms/step - loss: 2099.3562 - accuracy: 0.0000e+00 - val_loss: 393.4486 - val_accuracy: 0.0000e+00\n",
            "Epoch 469/500\n",
            "6/6 [==============================] - 1s 231ms/step - loss: 2104.7657 - accuracy: 0.0000e+00 - val_loss: 316.6269 - val_accuracy: 0.0000e+00\n",
            "Epoch 470/500\n",
            "6/6 [==============================] - 1s 225ms/step - loss: 2042.2728 - accuracy: 0.0000e+00 - val_loss: 461.5015 - val_accuracy: 0.0000e+00\n",
            "Epoch 471/500\n",
            "6/6 [==============================] - 1s 241ms/step - loss: 2120.6704 - accuracy: 0.0000e+00 - val_loss: 464.6183 - val_accuracy: 0.0000e+00\n",
            "Epoch 472/500\n",
            "6/6 [==============================] - 1s 231ms/step - loss: 2348.2176 - accuracy: 0.0000e+00 - val_loss: 364.3948 - val_accuracy: 0.0000e+00\n",
            "Epoch 473/500\n",
            "6/6 [==============================] - 1s 242ms/step - loss: 1894.8696 - accuracy: 0.0000e+00 - val_loss: 678.0557 - val_accuracy: 0.0000e+00\n",
            "Epoch 474/500\n",
            "6/6 [==============================] - 1s 232ms/step - loss: 1883.1492 - accuracy: 0.0000e+00 - val_loss: 345.0143 - val_accuracy: 0.0000e+00\n",
            "Epoch 475/500\n",
            "6/6 [==============================] - 1s 232ms/step - loss: 1826.7531 - accuracy: 0.0000e+00 - val_loss: 351.6039 - val_accuracy: 0.0000e+00\n",
            "Epoch 476/500\n",
            "6/6 [==============================] - 1s 232ms/step - loss: 1797.4998 - accuracy: 0.0000e+00 - val_loss: 372.0264 - val_accuracy: 0.0000e+00\n",
            "Epoch 477/500\n",
            "6/6 [==============================] - 1s 233ms/step - loss: 2035.7562 - accuracy: 0.0000e+00 - val_loss: 364.3368 - val_accuracy: 0.0000e+00\n",
            "Epoch 478/500\n",
            "6/6 [==============================] - 1s 232ms/step - loss: 2722.4827 - accuracy: 0.0000e+00 - val_loss: 715.9499 - val_accuracy: 0.0000e+00\n",
            "Epoch 479/500\n",
            "6/6 [==============================] - 1s 228ms/step - loss: 2283.3986 - accuracy: 0.0000e+00 - val_loss: 728.2527 - val_accuracy: 0.0000e+00\n",
            "Epoch 480/500\n",
            "6/6 [==============================] - 1s 234ms/step - loss: 2135.0390 - accuracy: 0.0000e+00 - val_loss: 343.0353 - val_accuracy: 0.0000e+00\n",
            "Epoch 481/500\n",
            "6/6 [==============================] - 1s 231ms/step - loss: 2138.3974 - accuracy: 0.0000e+00 - val_loss: 372.9776 - val_accuracy: 0.0000e+00\n",
            "Epoch 482/500\n",
            "6/6 [==============================] - 1s 234ms/step - loss: 2266.5089 - accuracy: 0.0000e+00 - val_loss: 744.9150 - val_accuracy: 0.0000e+00\n",
            "Epoch 483/500\n",
            "6/6 [==============================] - 1s 236ms/step - loss: 2213.8308 - accuracy: 0.0000e+00 - val_loss: 752.1616 - val_accuracy: 0.0000e+00\n",
            "Epoch 484/500\n",
            "6/6 [==============================] - 1s 228ms/step - loss: 1854.8992 - accuracy: 0.0000e+00 - val_loss: 368.3756 - val_accuracy: 0.0000e+00\n",
            "Epoch 485/500\n",
            "6/6 [==============================] - 1s 227ms/step - loss: 1841.0142 - accuracy: 0.0000e+00 - val_loss: 364.3801 - val_accuracy: 0.0000e+00\n",
            "Epoch 486/500\n",
            "6/6 [==============================] - 1s 228ms/step - loss: 2368.7640 - accuracy: 0.0000e+00 - val_loss: 386.4072 - val_accuracy: 0.0000e+00\n",
            "Epoch 487/500\n",
            "6/6 [==============================] - 1s 234ms/step - loss: 2607.3289 - accuracy: 0.0000e+00 - val_loss: 1217.5731 - val_accuracy: 0.0000e+00\n",
            "Epoch 488/500\n",
            "6/6 [==============================] - 1s 235ms/step - loss: 2290.8353 - accuracy: 0.0000e+00 - val_loss: 566.4929 - val_accuracy: 0.0000e+00\n",
            "Epoch 489/500\n",
            "6/6 [==============================] - 1s 231ms/step - loss: 2336.7704 - accuracy: 0.0000e+00 - val_loss: 667.3189 - val_accuracy: 0.0000e+00\n",
            "Epoch 490/500\n",
            "6/6 [==============================] - 1s 225ms/step - loss: 2125.4916 - accuracy: 0.0000e+00 - val_loss: 926.2621 - val_accuracy: 0.0000e+00\n",
            "Epoch 491/500\n",
            "6/6 [==============================] - 1s 231ms/step - loss: 2442.9695 - accuracy: 0.0000e+00 - val_loss: 612.9456 - val_accuracy: 0.0000e+00\n",
            "Epoch 492/500\n",
            "6/6 [==============================] - 1s 226ms/step - loss: 2050.4409 - accuracy: 0.0000e+00 - val_loss: 917.1641 - val_accuracy: 0.0000e+00\n",
            "Epoch 493/500\n",
            "6/6 [==============================] - 1s 228ms/step - loss: 2055.3341 - accuracy: 0.0000e+00 - val_loss: 508.0855 - val_accuracy: 0.0000e+00\n",
            "Epoch 494/500\n",
            "6/6 [==============================] - 1s 221ms/step - loss: 2071.4585 - accuracy: 0.0000e+00 - val_loss: 729.4068 - val_accuracy: 0.0000e+00\n",
            "Epoch 495/500\n",
            "6/6 [==============================] - 1s 229ms/step - loss: 1795.4320 - accuracy: 0.0000e+00 - val_loss: 545.0883 - val_accuracy: 0.0000e+00\n",
            "Epoch 496/500\n",
            "6/6 [==============================] - 1s 228ms/step - loss: 2054.2232 - accuracy: 0.0000e+00 - val_loss: 656.4235 - val_accuracy: 0.0000e+00\n",
            "Epoch 497/500\n",
            "6/6 [==============================] - 1s 227ms/step - loss: 1869.6789 - accuracy: 0.0000e+00 - val_loss: 855.2067 - val_accuracy: 0.0000e+00\n",
            "Epoch 498/500\n",
            "6/6 [==============================] - 1s 231ms/step - loss: 2111.3006 - accuracy: 0.0000e+00 - val_loss: 586.6165 - val_accuracy: 0.0000e+00\n",
            "Epoch 499/500\n",
            "6/6 [==============================] - 1s 224ms/step - loss: 2012.7793 - accuracy: 0.0000e+00 - val_loss: 431.5673 - val_accuracy: 0.0000e+00\n",
            "Epoch 500/500\n",
            "6/6 [==============================] - 1s 227ms/step - loss: 2008.3233 - accuracy: 0.0000e+00 - val_loss: 787.4536 - val_accuracy: 0.0000e+00\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<tensorflow.python.keras.callbacks.History at 0x7fac9cd075d0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DMPBELBqaucU"
      },
      "source": [
        "Train on 1055 samples, validate on 118 samples\n",
        "\n",
        "Epoch 1/500\n",
        "1055/1055 [==============================] - 6s - loss: 54.5698 - acc: 0.0000e+00 - val_loss: 56.6067 - val_acc: 0.0000e+00\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
        "Epoch 2/500\n",
        "1055/1055 [==============================] - 4s - loss: 54.2361 - acc: 0.0000e+00 - val_loss: 56.1267 - val_acc: 0.0000e+00\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
        "Epoch 3/500\n",
        "1055/1055 [==============================] - 3s - loss: 53.7573 - acc: 0.0000e+00 - val_loss: 55.5052 - val_acc: 0.0000e+00\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
        "Epoch 4/500\n",
        "1055/1055 [==============================] - 3s - loss: 53.1317 - acc: 0.0000e+00 - val_loss: 54.6624 - val_acc: 0.0000e+00\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
        "Epoch 5/500\n",
        "1055/1055 [==============================] - 3s - loss: 52.2918 - acc: 0.0000e+00 - val_loss: 53.5170 - val_acc: 0.0000e+00\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
        "Epoch 6/500\n",
        "1055/1055 [==============================] - 3s - loss: 51.1431 - acc: 0.0000e+00 - val_loss: 52.0444 - val_acc: 0.0000e+00\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
        "Epoch 7/500\n",
        "1055/1055 [==============================] - 3s - loss: 49.7124 - acc: 0.0000e+00 - val_loss: 50.2901 - val_acc: 0.0000e+00\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
        "Epoch 8/500\n",
        "1055/1055 [==============================] - 3s - loss: 48.0304 - acc: 0.0000e+00 - val_loss: 48.4176 - val_acc: 0.0000e+00\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
        "Epoch 9/500\n",
        "1055/1055 [==============================] - 3s - loss: 46.2073 - acc: 0.0000e+00 - val_loss: 46.4271 - val_acc: 0.0000e+00\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
        "Epoch 10/500\n",
        "1055/1055 [==============================] - 3s - loss: 44.2880 - acc: 0.0000e+00 - val_loss: 44.3134 - val_acc: 0.0000e+00\b\b\n",
        "\n",
        "Epoch 490/500\n",
        "1055/1055 [==============================] - 6s - loss: 3.3352 - acc: 0.0000e+00 - val_loss: 0.2747 - val_acc: 0.0000e+00\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
        "Epoch 491/500\n",
        "1055/1055 [==============================] - 6s - loss: 3.3220 - acc: 0.0000e+00 - val_loss: 0.3347 - val_acc: 0.0000e+00\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
        "Epoch 492/500\n",
        "1055/1055 [==============================] - 6s - loss: 3.3430 - acc: 0.0000e+00 - val_loss: 0.3876 - val_acc: 0.0000e+00\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
        "Epoch 493/500\n",
        "1055/1055 [==============================] - 6s - loss: 3.3882 - acc: 0.0000e+00 - val_loss: 0.3919 - val_acc: 0.0000e+00\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
        "Epoch 494/500\n",
        "1055/1055 [==============================] - 6s - loss: 3.3117 - acc: 0.0000e+00 - val_loss: 0.3515 - val_acc: 0.0000e+00\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
        "Epoch 495/500\n",
        "1055/1055 [==============================] - 7s - loss: 3.4429 - acc: 0.0000e+00 - val_loss: 0.3073 - val_acc: 0.0000e+00\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
        "Epoch 496/500\n",
        "1055/1055 [==============================] - 7s - loss: 3.3748 - acc: 0.0000e+00 - val_loss: 0.2877 - val_acc: 0.0000e+00\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
        "Epoch 497/500\n",
        "1055/1055 [==============================] - 6s - loss: 3.3394 - acc: 0.0000e+00 - val_loss: 0.2870 - val_acc: 0.0000e+00\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
        "Epoch 498/500\n",
        "1055/1055 [==============================] - 6s - loss: 3.3265 - acc: 0.0000e+00 - val_loss: 0.2725 - val_acc: 0.0000e+00\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
        "Epoch 499/500\n",
        "1055/1055 [==============================] - 6s - loss: 3.3056 - acc: 0.0000e+00 - val_loss: 0.2654 - val_acc: 0.0000e+00\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n",
        "Epoch 500/500\n",
        "1055/1055 [==============================] - 6s - loss: 3.3673 - acc: 0.0000e+00 - val_loss: 0.2697 - val_acc: 0.0000e+00\b\b"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0sLQzFaqaucX",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c3c56f1f-651e-4b99-83e1-bfdf477f60a9"
      },
      "source": [
        "trainScore = model.evaluate(X_train, y_train, verbose=0)\n",
        "print('Train Score: %.2f MSE (%.2f RMSE)' % (trainScore[0], math.sqrt(trainScore[0])))\n",
        "\n",
        "testScore = model.evaluate(X_test, y_test, verbose=0)\n",
        "print('Test Score: %.2f MSE (%.2f RMSE)' % (testScore[0], math.sqrt(testScore[0])))"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Train Score: 1267.28 MSE (35.60 RMSE)\n",
            "Test Score: 886.55 MSE (29.77 RMSE)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vqnHpPHJaucb"
      },
      "source": [
        "Predictions vs Real results"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "wRmeTp9iaucb",
        "outputId": "5f35d2ae-e4ad-4525-bc4e-91c36c1558e9"
      },
      "source": [
        "import matplotlib.pyplot as plt2\n",
        "p=model.predict(X_test)\n",
        "plt2.plot(p,color='red', label='prediction')\n",
        "plt2.plot(y_test,color='blue', label='y_test')\n",
        "plt2.legend(loc='upper left')\n",
        "plt2.show()\n",
        "\n"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 404
        },
        "id": "o0mNTA1Ho7aG",
        "outputId": "280db1fd-4f7f-4635-9cc2-32598137a0d6"
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.activity.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fexperimentsandconfigs%20https%3a%2f%2fwww.googleapis.com%2fauth%2fphotos.native&response_type=code\n",
            "\n",
            "Enter your authorization code:\n",
            "1328\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-24-d5df0069828e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mgoogle\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolab\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mdrive\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mdrive\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmount\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/content/drive'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/google/colab/drive.py\u001b[0m in \u001b[0;36mmount\u001b[0;34m(mountpoint, force_remount, timeout_ms, use_metadata_server)\u001b[0m\n\u001b[1;32m    261\u001b[0m       \u001b[0mwrote_to_fifo\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    262\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mcase\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m5\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 263\u001b[0;31m       \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'mount failed: invalid oauth code'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    264\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mcase\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m6\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    265\u001b[0m       \u001b[0;31m# Terminate the DriveFS binary before killing bash.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: mount failed: invalid oauth code"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "u-WRsgW-0XM-"
      },
      "source": [
        "model.save('bigData_trained_model.h5')"
      ],
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UHz7t7Z1AZ54"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 391
        },
        "id": "SDivkLzYcUMe",
        "outputId": "f8ec4dd2-11a4-4190-a55e-f6d1d0caa2cf"
      },
      "source": [
        "small_data=pd.read_csv('small_new.csv')\n",
        "dfN=pd.DataFrame(small_data)\n",
        "dfN.head()\n",
        "dfL=dfN[['score1','score2','High','Low','Turnover','VWAP']]\n",
        "dfL.head()\n",
        "model2=Sequential()\n",
        "model2.add(Dense(6,input_shape=(22,1),activation='relu'))\n",
        "layer1=model.get_layer(index=4)\n",
        "# layer1.get_config()\n",
        "# model.summary()\n",
        "result = concatenate([layer1.output,model2.output]) # Merge data must same row column\n",
        "output = Dense(1, activation='relu')(result)\n",
        "modelL = Model(inputs=[model.input,model2.input], outputs=output)\n",
        "modelL.compile(loss='mse',optimizer='adam',metrics=['accuracy'])\n",
        "modelL.summary()"
      ],
      "execution_count": 124,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-124-1ad7e480084a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;31m# layer1.get_config()\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;31m# model.summary()\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mconcatenate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mlayer1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moutput\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mmodel2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moutput\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# Merge data must same row column\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     12\u001b[0m \u001b[0moutput\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mDense\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mactivation\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'relu'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0mmodelL\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mModel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mmodel2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moutputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0moutput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/layers/merge.py\u001b[0m in \u001b[0;36mconcatenate\u001b[0;34m(inputs, axis, **kwargs)\u001b[0m\n\u001b[1;32m    929\u001b[0m       \u001b[0mA\u001b[0m \u001b[0mtensor\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mthe\u001b[0m \u001b[0mconcatenation\u001b[0m \u001b[0mof\u001b[0m \u001b[0mthe\u001b[0m \u001b[0minputs\u001b[0m \u001b[0malongside\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;31m \u001b[0m\u001b[0;31m`\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;31m`\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    930\u001b[0m   \"\"\"\n\u001b[0;32m--> 931\u001b[0;31m   \u001b[0;32mreturn\u001b[0m \u001b[0mConcatenate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    932\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    933\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/engine/base_layer.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    950\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0m_in_functional_construction_mode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput_list\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    951\u001b[0m       return self._functional_construction_call(inputs, args, kwargs,\n\u001b[0;32m--> 952\u001b[0;31m                                                 input_list)\n\u001b[0m\u001b[1;32m    953\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    954\u001b[0m     \u001b[0;31m# Maintains info about the `Layer.call` stack.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/engine/base_layer.py\u001b[0m in \u001b[0;36m_functional_construction_call\u001b[0;34m(self, inputs, args, kwargs, input_list)\u001b[0m\n\u001b[1;32m   1089\u001b[0m         \u001b[0;31m# Check input assumptions set after layer building, e.g. input shape.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1090\u001b[0m         outputs = self._keras_tensor_symbolic_call(\n\u001b[0;32m-> 1091\u001b[0;31m             inputs, input_masks, args, kwargs)\n\u001b[0m\u001b[1;32m   1092\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1093\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0moutputs\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/engine/base_layer.py\u001b[0m in \u001b[0;36m_keras_tensor_symbolic_call\u001b[0;34m(self, inputs, input_masks, args, kwargs)\u001b[0m\n\u001b[1;32m    820\u001b[0m       \u001b[0;32mreturn\u001b[0m \u001b[0mnest\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmap_structure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkeras_tensor\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mKerasTensor\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moutput_signature\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    821\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 822\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_infer_output_signature\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput_masks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    823\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    824\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m_infer_output_signature\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput_masks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/engine/base_layer.py\u001b[0m in \u001b[0;36m_infer_output_signature\u001b[0;34m(self, inputs, args, kwargs, input_masks)\u001b[0m\n\u001b[1;32m    860\u001b[0m           \u001b[0;31m# overridden).\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    861\u001b[0m           \u001b[0;31m# TODO(kaftan): do we maybe_build here, or have we already done it?\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 862\u001b[0;31m           \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_maybe_build\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    863\u001b[0m           \u001b[0moutputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcall_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    864\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/engine/base_layer.py\u001b[0m in \u001b[0;36m_maybe_build\u001b[0;34m(self, inputs)\u001b[0m\n\u001b[1;32m   2708\u001b[0m         \u001b[0;31m# operations.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2709\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mtf_utils\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmaybe_init_scope\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2710\u001b[0;31m           \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbuild\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput_shapes\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# pylint:disable=not-callable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2711\u001b[0m       \u001b[0;31m# We must set also ensure that the layer is marked as built, and the build\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2712\u001b[0m       \u001b[0;31m# shape is stored since user defined build functions may not be calling\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/utils/tf_utils.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(instance, input_shape)\u001b[0m\n\u001b[1;32m    270\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0minput_shape\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    271\u001b[0m       \u001b[0minput_shape\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mconvert_shapes\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput_shape\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mto_tuples\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 272\u001b[0;31m     \u001b[0moutput_shape\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minstance\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput_shape\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    273\u001b[0m     \u001b[0;31m# Return shapes from `fn` as TensorShapes.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    274\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0moutput_shape\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/layers/merge.py\u001b[0m in \u001b[0;36mbuild\u001b[0;34m(self, input_shape)\u001b[0m\n\u001b[1;32m    508\u001b[0m       \u001b[0mranks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mshape\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mshape_set\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    509\u001b[0m       \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mranks\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 510\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merr_msg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    511\u001b[0m       \u001b[0;31m# Get the only rank for the set.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    512\u001b[0m       \u001b[0;34m(\u001b[0m\u001b[0mrank\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mranks\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got inputs shapes: [(None, 16), (None, 22, 6)]"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 865
        },
        "id": "PpxKhyVZAxuD",
        "outputId": "538648c8-1f59-4006-b610-eae019ae8dd4"
      },
      "source": [
        "from keras.utils.vis_utils import plot_model\n",
        "\n",
        "plot_model(modelL, to_file='model_plot.png', show_shapes=True, show_layer_names=True)"
      ],
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "i_TnVGDL_Ybw",
        "outputId": "ddc0b693-5cd8-404d-9f98-09f0c260f464"
      },
      "source": [
        "layer1.trainable=False\n",
        "modelL.get_layer(index=1).trainable=False\n",
        "modelL.get_layer(index=3).trainable=False\n",
        "modelL.summary()"
      ],
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"model_1\"\n",
            "__________________________________________________________________________________________________\n",
            "Layer (type)                    Output Shape         Param #     Connected to                     \n",
            "==================================================================================================\n",
            "lstm_input (InputLayer)         [(None, 22, 4)]      0                                            \n",
            "__________________________________________________________________________________________________\n",
            "lstm (LSTM)                     (None, 22, 128)      68096       lstm_input[0][0]                 \n",
            "__________________________________________________________________________________________________\n",
            "dropout (Dropout)               (None, 22, 128)      0           lstm[0][0]                       \n",
            "__________________________________________________________________________________________________\n",
            "lstm_1 (LSTM)                   (None, 64)           49408       dropout[0][0]                    \n",
            "__________________________________________________________________________________________________\n",
            "dropout_1 (Dropout)             (None, 64)           0           lstm_1[0][0]                     \n",
            "__________________________________________________________________________________________________\n",
            "dense_13_input (InputLayer)     [(None, 22)]         0                                            \n",
            "__________________________________________________________________________________________________\n",
            "dense (Dense)                   (None, 16)           1040        dropout_1[0][0]                  \n",
            "__________________________________________________________________________________________________\n",
            "dense_13 (Dense)                (None, 6)            138         dense_13_input[0][0]             \n",
            "__________________________________________________________________________________________________\n",
            "concatenate_10 (Concatenate)    (None, 22)           0           dense[0][0]                      \n",
            "                                                                 dense_13[0][0]                   \n",
            "__________________________________________________________________________________________________\n",
            "dense_14 (Dense)                (None, 1)            23          concatenate_10[0][0]             \n",
            "==================================================================================================\n",
            "Total params: 118,705\n",
            "Trainable params: 161\n",
            "Non-trainable params: 118,544\n",
            "__________________________________________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eCVedpfkAO_u",
        "outputId": "2da2bf3e-3b14-4a6c-a9ac-458229f9f164"
      },
      "source": [
        "df3=dfN\n",
        "index = df3[df3[\"score2\"] == 'positive'].index\n",
        "index1 = df3[df3[\"score2\"] == 'neutral'].index\n",
        "index2 = df3[df3[\"score2\"] == 'negative'].index\n",
        "df3.loc[index,\"score2\"] = 500.0\n",
        "\n",
        "df3.loc[index1,\"score2\"] = 50.0\n",
        "df3.loc[index2,\"score2\"] = -500.0\n",
        "df3[\"score2\"] =df3[\"score2\"].astype(float)\n",
        "df3['score2']"
      ],
      "execution_count": 103,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0       50.0\n",
              "1       50.0\n",
              "2       50.0\n",
              "3       50.0\n",
              "4     -500.0\n",
              "       ...  \n",
              "334     50.0\n",
              "335     50.0\n",
              "336     50.0\n",
              "337    500.0\n",
              "338     50.0\n",
              "Name: score2, Length: 339, dtype: float64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 103
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mZIFTyo5AuZJ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "30ad5162-91b8-49ba-bcd0-1f0283d4ed3a"
      },
      "source": [
        "#from neuralprophet import NeuralProphet\n",
        "#m = NeuralProphet()\n",
        "#df.columns\n",
        "# layer1.get_weights()\n",
        "# modelL.get_layer('dense_14').get_weights()\n",
        "X_train2,y_train2,X_test2,y_test2=load_data2(df3[['score2']],window)\n",
        "X_train2.reshape((284,22))\n",
        "X_train3,y_train3,X_test3,y_test3=load_data(df3[['High','Low','Turnover','VWAP']][::1],window)\n",
        "X=np.zeros((284,22))\n",
        "X=X_train2[:,:,0]\n",
        "X_train4=[X_train3,X]\n",
        "y_train4=y_train3\n",
        "X"
      ],
      "execution_count": 144,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[  50.,   50.,   50., ...,   50.,   50.,  500.],\n",
              "       [  50.,   50.,   50., ...,   50.,  500.,   50.],\n",
              "       [  50.,   50., -500., ...,  500.,   50.,   50.],\n",
              "       ...,\n",
              "       [  50.,   50.,   50., ...,   50.,   50.,  500.],\n",
              "       [  50.,   50.,  500., ...,   50.,  500.,   50.],\n",
              "       [  50.,  500.,   50., ...,  500.,   50.,   50.]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 144
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 357
        },
        "id": "N9Cjzro6-cxH",
        "outputId": "007b0c67-7769-4c83-83c2-ab2e7d22c6a4"
      },
      "source": [
        "modelL.fit(X_train4,y_train4,\n",
        "           batch_size=100,\n",
        "           epochs=100,\n",
        "           validation_split=0.1,\n",
        "           verbose=1)\n"
      ],
      "execution_count": 142,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/100\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-142-5b25e1ef5691>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m            \u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m            \u001b[0mvalidation_split\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m            verbose=1)\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/engine/training.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_batch_size, validation_freq, max_queue_size, workers, use_multiprocessing)\u001b[0m\n\u001b[1;32m   1098\u001b[0m                 _r=1):\n\u001b[1;32m   1099\u001b[0m               \u001b[0mcallbacks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_train_batch_begin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1100\u001b[0;31m               \u001b[0mtmp_logs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1101\u001b[0m               \u001b[0;32mif\u001b[0m \u001b[0mdata_handler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshould_sync\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1102\u001b[0m                 \u001b[0mcontext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masync_wait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    826\u001b[0m     \u001b[0mtracing_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexperimental_get_tracing_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    827\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mtrace\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTrace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_name\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mtm\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 828\u001b[0;31m       \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    829\u001b[0m       \u001b[0mcompiler\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"xla\"\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_experimental_compile\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0;34m\"nonXla\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    830\u001b[0m       \u001b[0mnew_tracing_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexperimental_get_tracing_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m_call\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    853\u001b[0m       \u001b[0;31m# In this case we have created variables on the first call, so we run the\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    854\u001b[0m       \u001b[0;31m# defunned version which is guaranteed to never create variables.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 855\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stateless_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# pylint: disable=not-callable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    856\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stateful_fn\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    857\u001b[0m       \u001b[0;31m# Release the lock early so that multiple threads can perform the call\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mTypeError\u001b[0m: 'NoneType' object is not callable"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gEchHSZV-xIx"
      },
      "source": [
        "# from neuralprophet import NeuralProphet\n",
        "# m = NeuralProphet()\n",
        "# df1= get_stock_data(stock_name,0)\n",
        "# a=[]\n",
        "# df2 = pd.DataFrame(a,columns=['ds','y'])\n",
        "# df2['ds']=df1['Date']\n",
        "# df2['y']=df1['Close']\n",
        "# df2.head()\n",
        "# metrics = m.fit(df2, freq=\"D\")\n",
        "# future = m.make_future_dataframe(df2, periods=60)\n",
        "# forecast = m.predict(future)\n",
        "# fig_forecast = m.plot(forecast)\n",
        "# # fig_components = m.plot_components(forecast)\n",
        "# # fig_model = m.plot_parameters()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IVi223zXX9fN"
      },
      "source": [
        "# model = NeuralProphet(\n",
        "#     epochs=100,\n",
        "#     learning_rate=0.1,\n",
        "# )\n",
        "# model.fit(df2, \n",
        "#           freq='D',\n",
        "#           valid_p=0.2,\n",
        "#           epochs=100)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "78qXnoAqYxua"
      },
      "source": [
        "# plot_forecast(model, df2, periods=60, historic_predictions=True)  "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MT5zzqwYagCS"
      },
      "source": [
        "# future = model.make_future_dataframe(df2, periods=60)\n",
        "# forecast = model.predict(future)\n",
        "# fig_forecast = model.plot(forecast)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JowiYI2qa4l5"
      },
      "source": [
        "df"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SWIG9PqwI71U"
      },
      "source": [
        "import pandas as pd"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JDRL-incOY_e"
      },
      "source": [
        "df = pd.read_csv(\"ADANIPORTS.csv\")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bbWxBrfqOr9D"
      },
      "source": [
        "df.info()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GlPAWqESOtu8"
      },
      "source": [
        "df[df[\"Date\"] == \"2020-05-26\"]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3eiG7AZVPWrL"
      },
      "source": [
        "k = df[2744:3088]\n",
        "len(k)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VOKjPLLsQjyB"
      },
      "source": [
        "df2 = pd.read_csv(\"compressed_2.csv\")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EdAzFYNgQ_fE"
      },
      "source": [
        "df2"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EnGTTy_fRA3X"
      },
      "source": [
        "\n",
        "y2 = df2[::-1].reset_index(drop=True)\n",
        "y2"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "L8ZRihZzTS1U"
      },
      "source": [
        "import scipy.stats\n",
        "l1 = k[\"Close\"]\n",
        "l2 = df2[\"score1\"]\n",
        "d3 = l2[0:344]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MsaCBEEdXKW0"
      },
      "source": [
        "\n",
        "len(l1)\n",
        "scipy.stats.pearsonr(l1,d3)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "738OisbPXTjc"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}